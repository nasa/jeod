variables:
    GIT_STRATEGY: fetch
    #unique tag name to use for current build
    CONTAINER_BUILD_TAG: dev
    #the master tag to override
    CONTAINER_MASTER_TAG: latest
    VERIF_SCRIPT: "regression/verification.py"
    VERIF_LIST: "regression/verif_sim_list.py"
    VERIF_CHECKPOINT_LIST: "regression/verif_sim_checkpoint_list.py"
    WARNING_LIST: "-Werror -Wall -Wextra -Wwrite-strings -Wswitch-default -Wswitch-enum -Wdisabled-optimization -Wfloat-equal -Winit-self -Wredundant-decls -Wno-cast-function-type"
    WARNING_LIST_C: "$WARNING_LIST  -Wbad-function-cast -Wjump-misses-init -Wmissing-prototypes"
    WARNING_LIST_CXX: "$WARNING_LIST"

stages:
    - Docker Build
    - Build Libs and Unit Test
    - Build Run and Verify
    - Analysis and Misc
    - Build Docs
    - Release

.OS-CentOS7: &OS-CentOS7
    variables:
        VERIF_DATA: SET_test_val
    image:
        name: esgl-gitlab.jsc.nasa.gov:5005/jeod/jeod-dev/jeod_centos7:$CONTAINER_MASTER_TAG

.OS-Oracle8: &OS-Oracle8
    variables:
        VERIF_DATA: SET_test_val_rh8
    image:
        name: esgl-gitlab.jsc.nasa.gov:5005/jeod/jeod-dev/jeod_oracle8:$CONTAINER_MASTER_TAG

.OS-Ubuntu18: &OS-Ubuntu18
    variables:
        VERIF_DATA: SET_test_val
    image:
        name: esgl-gitlab.jsc.nasa.gov:5005/jeod/jeod-dev/jeod_ubuntu18:$CONTAINER_MASTER_TAG

.Build-Lib-Trick: &Build-Lib-Trick-Template
    stage: Build Libs and Unit Test
    tags:
        - docker
    when: always
    dependencies: []
    before_script:
        - "export USER=$(whoami)"
        - "export JEOD_HOME=$(pwd)"
        - "export TRICK_HOME=/data/trick/"
        - "export JEOD_SPICE_DIR=/data/cspice/"
        - "export PATH=${TRICK_HOME}/bin:${PATH}"
        - "export MAKEFLAGS=-j5"
        - export TRICK_CFLAGS="$TRICK_CFLAGS $WARNING_LIST_C"
        - export TRICK_CXXFLAGS="$TRICK_CXXFLAGS $WARNING_LIST_CXX"
    script:
        - "$TRICK_HOME/bin/trick-version"
        - "make -f bin/jeod/makefile TRICK_BUILD=1 BUILD_TYPE=Debug"
        - "if [ -f lib_jeod*/libjeod.a ]; then $(exit 0); else $(exit 1); fi"
    artifacts:
        when: always
        paths:
           - "lib_build.txt"
           - "lib_jeod*/**/*"
           - "build*/CMakeCache.txt"
        expire_in: 1 week

.Build-Trickified-Lib: &Build-Trickified-Lib-Template
    tags:
        - docker
    when: always
    dependencies: []
    stage: Build Libs and Unit Test
    before_script:
        - "export USER=$(whoami)"
        - "export JEOD_HOME=$(pwd)"
        - "export TRICK_HOME=/data/trick/"
        - "export JEOD_SPICE_DIR=/data/cspice/"
        - "export PATH=${TRICK_HOME}/bin:${PATH}"
        - "export MAKEFLAGS=-j5"
        - export TRICK_CFLAGS="$TRICK_CFLAGS $WARNING_LIST_C"
        - export TRICK_CXXFLAGS="$TRICK_CXXFLAGS $WARNING_LIST_CXX"
    script:
        - "$TRICK_HOME/bin/trick-version"
        - "cd trickified &&  make && cd -"
        - "if [ -f trickified/trickified_jeod*.o ]; then $(exit 0); else $(exit 1); fi"
    artifacts:
        when: always
        paths:
           - "trickified/build*/"
           - "trickified/python*/"
           - "trickified/trick/"
           - "trickified/.trick/"
           - "trickified/trickified_jeod*.o"
        expire_in: 1 week

.Buid-Lib: &Build-Lib-Template
    tags:
        - docker
    when: always
    dependencies: []
    stage: Build Libs and Unit Test
    before_script:
        - "export USER=$(whoami)"
        - "export JEOD_HOME=$(pwd)"
        - "export TRICK_HOME=/data/trick/"
        - "export JEOD_SPICE_DIR=/data/cspice/"
        - "export PATH=${TRICK_HOME}/bin:${PATH}"
        - "export MAKEFLAGS=-j5"
        - export TRICK_CFLAGS="$TRICK_CFLAGS $WARNING_LIST_C"
        - export TRICK_CXXFLAGS="$TRICK_CXXFLAGS $WARNING_LIST_CXX"
    script:
        - "make -f bin/jeod/makefile TRICK_BUILD=0 BUILD_TYPE=Debug"
        - "if [ -f lib_jeod*/libjeod.a ]; then $(exit 0); else $(exit 1); fi"
    artifacts:
        when: always
        paths:
           - "lib_build.txt"
           - "lib_jeod*/**/*"
           - "build*/CMakeCache.txt"
        expire_in: 1 week

.Verify-Updated-Sims: &Verify-Updated-Sims-Template
    tags:
        - docker
    when: manual
    except:
        - tags
        - trunk
        - master
    stage: Build Run and Verify
    before_script:
        - "export USER=$(whoami)"
        - "export JEOD_HOME=$(pwd)"
        - "export TRICK_HOME=/data/trick/"
        - "export JEOD_SPICE_DIR=/data/cspice/"
        - "export PATH=${TRICK_HOME}/bin:${PATH}"
        - "export TERM=xterm"
        - "cd $JEOD_HOME"
        - bin/jeod_cm/reset_artifacts_modtime.py
        - git fetch origin trunk
        - "git diff --name-only HEAD origin/trunk > $JEOD_HOME/regression/git_diff.txt"
        - 'export TRICK_HOST_CPU=`trick-gte TRICK_HOST_CPU`'
        - export TRICK_CFLAGS="$TRICK_CFLAGS $WARNING_LIST_C"
        - export TRICK_CXXFLAGS="$TRICK_CXXFLAGS $WARNING_LIST_CXX"
    script:
        - '$VERIF_SCRIPT -r "SET_test" -v "$VERIF_DATA" -p $JEOD_HOME -f $JEOD_HOME/$VERIF_LIST -b "$TRICK_HOME/bin/trick-CP TRICKIFIED=1" -c10 --build-all --cidiff-file "$JEOD_HOME/regression/git_diff.txt" -L "$JEOD_HOME/regression/logs" -a '
        - '$VERIF_SCRIPT -r "SET_test" -v "$VERIF_DATA" -p $JEOD_HOME -f $JEOD_HOME/$VERIF_CHECKPOINT_LIST -b "$TRICK_HOME/bin/trick-CP TRICKIFIED=1" -c1 --build-none --cidiff-file "$JEOD_HOME/regression/git_diff.txt" -L "$JEOD_HOME/regression/logs" -a'
    artifacts:
        paths:
           - "**/git_diff.txt"
           - "regression/logs/*.txt"
           - "**/verif_docs"
        when: always
        expire_in: 1 week

.Verify-All-Sims: &Verify-All-Sims-Template
    tags:
        - docker
    when: always
    stage: Build Run and Verify
    before_script:
        - "export USER=$(whoami)"
        - "export JEOD_HOME=$(pwd)"
        - "export TRICK_HOME=/data/trick/"
        - "export JEOD_SPICE_DIR=/data/cspice/"
        - "export PATH=${TRICK_HOME}/bin:${PATH}"
        - "export TERM=xterm"
        - "cd $JEOD_HOME"
        - bin/jeod_cm/reset_artifacts_modtime.py
        - 'export TRICK_HOST_CPU=`trick-gte TRICK_HOST_CPU`'
        - export TRICK_CFLAGS="$TRICK_CFLAGS $WARNING_LIST_C"
        - export TRICK_CXXFLAGS="$TRICK_CXXFLAGS $WARNING_LIST_CXX"
    script:
        - '$VERIF_SCRIPT -r "SET_test" -v "$VERIF_DATA" -p $JEOD_HOME -f $JEOD_HOME/$VERIF_LIST -b "$TRICK_HOME/bin/trick-CP TRICKIFIED=1" -c10 --build-all -L "$JEOD_HOME/regression/logs" -a '
        - '$VERIF_SCRIPT -r "SET_test" -v "$VERIF_DATA" -p $JEOD_HOME -f $JEOD_HOME/$VERIF_CHECKPOINT_LIST -b "$TRICK_HOME/bin/trick-CP TRICKIFIED=1" -c1 --build-none -L "$JEOD_HOME/regression/logs" -a'
    artifacts:
        paths:
           - "regression/logs/*.txt"
           - "**/verif_docs"
        when: always
        expire_in: 1 week

.Run-Unit-Tests: &Run-Unit-Tests-Template
    tags:
        - docker
    when: always
    dependencies: []
    stage: Build Libs and Unit Test
    before_script:
        - "export USER=$(whoami)"
        - "export JEOD_HOME=$(pwd)"
        - "export TRICK_HOME=/data/trick/"
        - "export JEOD_SPICE_DIR=/data/cspice/"
        - "export PATH=${TRICK_HOME}/bin:${PATH}"
        - "export MAKEFLAGS=-j5"
    script:
        - bin/jeod_cm/coverage.py -c 6
    artifacts:
        when: always
        paths:
           - artifacts
        expire_in: 1 week

.FlawFinder: &FlawFinder-Template
    tags:
        - docker
    when: always
    dependencies: []
    stage: Analysis and Misc
    script:
        - mkdir -p artifacts/flawfinder
        - flawfinder models/ 2>&1 > artifacts/flawfinder/flawfinder.out
    artifacts:
        paths:
           - artifacts
        when: always
        expire_in: 1 week
    allow_failure: true

.CppCheck-Full: &CppCheck-Full-Template
    tags:
        - docker
    when: always
    dependencies: []
    stage: Analysis and Misc
    before_script:
        - "export USER=$(whoami)"
        - "export JEOD_HOME=$(pwd)"
        - "export TRICK_HOME=/data/trick/"
        - "export JEOD_SPICE_DIR=/data/cspice/"
        - "export PATH=${TRICK_HOME}/bin:${PATH}"
    script:
        - bin/jeod_cm/static_analysis.py -f
    artifacts:
        paths:
           - artifacts
        when: always
        expire_in: 1 week

.Generate-Ephemeris: &Generate-Ephemeris-Template
    tags:
        - docker
    when: always
    dependencies: []
    stage: Analysis and Misc
    before_script:
        - "export USER=$(whoami)"
        - "export JEOD_HOME=$(pwd)"
        - "export TRICK_HOME=/data/trick/"
        - "export JEOD_SPICE_DIR=/data/cspice/"
        - "export PATH=${TRICK_HOME}/bin:${PATH}"
        - "export MAKEFLAGS=-j5"
    script:
        - make -f bin/jeod/makefile REGEN_DE4XX_DATA=1 DE4XX_ONLY=1

.Check-Formatting: &Check-Formatting-Template
    tags:
        - docker
    when: always
    dependencies: []
    stage: Analysis and Misc
    script:
        - bin/jeod_cm/formatting.py
    artifacts:
        paths:
           - artifacts
        when: always
        expire_in: 1 week

.Docs: &Docs-Template
    tags:
        - docker
    when: always
    dependencies: []
    stage: Build Docs
    before_script:
        - "export USER=$(whoami)"
        - "export JEOD_HOME=$(pwd)"
        - "export TRICK_HOME=/data/trick/"
        - "export JEOD_SPICE_DIR=/data/cspice/"
        - "export PATH=${TRICK_HOME}/bin:${PATH}"
        - "export MAKEFLAGS=-j5"
    script:
        - "export PATH=$PATH:/usr/local/texlive/2018/bin/x86_64-linux"
        - "bin/jeod_cm/jeod_auto_cm.pl -pdfdoc"
        - "if [ -f doc_error ]; then $(exit 1); else $(exit 0); fi"
    artifacts:
        when: always
        paths:
           - doc_error
           - "**/*_out.txt"
           - "**/*.pdf"
        expire_in: 1 week

# BUILD LIBS ------------------------------------------------------------------
Build-Lib-CentOS7.6-T19.7.2:
    <<: [*Build-Lib-Trick-Template, *OS-CentOS7]

Build-Trickified-Lib-CentOS7.6-T19.7.2:
    <<: [*Build-Trickified-Lib-Template, *OS-CentOS7]

Build-Lib-CentOS7.6:
    <<: [*Build-Lib-Template, *OS-CentOS7]

Build-Lib-Oracle8-T19.7.2:
    <<: [*Build-Lib-Trick-Template, *OS-Oracle8]

Build-Trickified-Lib-Oracle8-T19.7.2:
    <<: [*Build-Trickified-Lib-Template, *OS-Oracle8]
    after_script:
        - "bin/jeod_cm/trickified_header_check.py"

Build-Lib-Oracle8:
    <<: [*Build-Lib-Template, *OS-Oracle8]

Build-Lib-Ubuntu18.04-T19.7.2:
    <<: [*Build-Lib-Trick-Template, *OS-Ubuntu18]

Build-Trickified-Lib-Ubuntu18.04-T19.7.2:
    <<: [*Build-Trickified-Lib-Template, *OS-Ubuntu18]

Build-Lib-Ubuntu18.04:
    <<: [*Build-Lib-Template, *OS-Ubuntu18]

# RUN SIM JOBS ----------------------------------------------------------------
Verify-Updated-Sims-CentOS7.6-T19.7.2:
    <<: [*Verify-Updated-Sims-Template, *OS-CentOS7]
    dependencies:
        - Build-Lib-CentOS7.6-T19.7.2
        - Build-Trickified-Lib-CentOS7.6-T19.7.2

Verify-All-Sims-CentOS7.6-T19.7.2:
    <<: [*Verify-All-Sims-Template, *OS-CentOS7]
    dependencies:
        - Build-Lib-CentOS7.6-T19.7.2
        - Build-Trickified-Lib-CentOS7.6-T19.7.2

Verify-Updated-Sims-Oracle8-T19.7.2:
    <<: [*Verify-Updated-Sims-Template, *OS-Oracle8]
    dependencies:
        - Build-Lib-Oracle8-T19.7.2
        - Build-Trickified-Lib-Oracle8-T19.7.2

Verify-All-Sims-Oracle8-T19.7.2:
    <<: [*Verify-All-Sims-Template, *OS-Oracle8]
    dependencies:
        - Build-Lib-Oracle8-T19.7.2
        - Build-Trickified-Lib-Oracle8-T19.7.2

Verify-Updated-Sims-Ubuntu18.04-T19.7.2:
    <<: [*Verify-Updated-Sims-Template, *OS-Ubuntu18]
    dependencies:
        - Build-Lib-Ubuntu18.04-T19.7.2
        - Build-Trickified-Lib-Ubuntu18.04-T19.7.2

Verify-All-Sims-Ubuntu18.04-T19.7.2:
    <<: [*Verify-All-Sims-Template, *OS-Ubuntu18]
    dependencies:
        - Build-Lib-Ubuntu18.04-T19.7.2
        - Build-Trickified-Lib-Ubuntu18.04-T19.7.2

# UNIT TESTS ------------------------------------------------------------------
Run-Unit-Tests-Oracle8:
    <<: [*Run-Unit-Tests-Template, *OS-Oracle8]

FlawFinder-Oracle8:
    <<: [*FlawFinder-Template, *OS-Oracle8]

CppCheck-Full-Oracle8:
    <<: [*CppCheck-Full-Template, *OS-Oracle8]

Generate-Ephemeris-Oracle8:
    <<: [*Generate-Ephemeris-Template, *OS-Oracle8]

Check-Formatting-Oracle8:
    <<: [*Check-Formatting-Template, *OS-Oracle8]

# DOCUMENTATION JOBS ----------------------------------------------------------
Docs-Oracle8-T19.7.2:
    <<: [*Docs-Template, *OS-Oracle8]

# RELEASE JOBS ----------------------------------------------------------------
Release-Job:
    tags:
        - docker
    when: manual
    dependencies:
        - CppCheck-Full-Oracle8
    stage: Release
    image:
        name: esgl-gitlab.jsc.nasa.gov:5005/jeod/jeod-dev/jeod_oracle8:$CONTAINER_MASTER_TAG
    only:
        - tags
    script:
        - "export USER=$(whoami)"
        - "export JEOD_HOME=$(pwd)"
        - "export TRICK_HOME=/data/trick/"
        - "export JEOD_SPICE_DIR=/data/cspice/"
        - "export PATH=${TRICK_HOME}/bin:${PATH}"
        - "export MAKEFLAGS=-j5"
        - "cd $JEOD_HOME"
        - "/bin/tcsh -f dgh_scripts/doxygenate.csh"
        - "perl dgh_scripts/make_refman.pl"
        - "[ -d dgh_scripts ] && rm -rf dgh_scripts"
        - "[ -d bin/jeod_cm ] && rm -rf bin/jeod_cm"
        - "[ -d docker ] && rm -rf docker "
        - "[ -d doxygen ] && rm -rf doxygen "
        - "[ -d regression ] && rm -rf regression "
        - "[ -d unsupported ] && rm -rf unsupported "
        - "[ -d tools  ] && rm -rf tools  "
        - "[ -d .git ] && rm -rf .git "
        - "[ -f .gitignore ] && rm -rf .gitignore"
        - "[ -f .gitlab-ci.yml ] && rm -rf .gitlab-ci.yml"

    artifacts:
        when: on_success
        paths:
           - "*"
        expire_in: 1 week

.docker_login: &docker_template
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - export | sort
    - whoami
    - hostname
    - hostname -i
    - docker info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  #the runner to run this job
  tags:
    - dind

# DOCKER JOBS ------------------------------------------------------------------
Build-Centos-7-Docker-Image:
  <<: *docker_template
  stage: Docker Build
  #$CI_REGISTRY_IMAGE would be resolved to the address of the registry tied to this project
  #builds the image with an unique tag
  #push the updated image
  script:
    - cd $CI_PROJECT_DIR/docker/centos7
    - docker build --build-arg myuser=gitlab-ci-token --pull --no-cache -t $CI_REGISTRY_IMAGE/jeod_centos7:$CONTAINER_MASTER_TAG .
    - docker push $CI_REGISTRY_IMAGE/jeod_centos7:$CONTAINER_MASTER_TAG
  when: manual

Build-Oracle-8-Docker-Image:
  <<: *docker_template
  stage: Docker Build
  #$CI_REGISTRY_IMAGE would be resolved to the address of the registry tied to this project
  #builds the image with an unique tag
  #push the updated image
  script:
    - cd $CI_PROJECT_DIR/docker/oracle8
    - docker build --build-arg myuser=gitlab-ci-token --pull --no-cache -t $CI_REGISTRY_IMAGE/jeod_oracle8:$CONTAINER_MASTER_TAG .
    - docker push $CI_REGISTRY_IMAGE/jeod_oracle8:$CONTAINER_MASTER_TAG
  when: manual

#job to build
Build-Ubuntu-18-Docker-Image:
  <<: *docker_template
  stage: Docker Build
  #$CI_REGISTRY_IMAGE would be resolved to the address of the registry tied to this project
  #builds the image with an unique tag
  #push the updated image
  script:
    - cd $CI_PROJECT_DIR/docker/ubuntu18
    - docker build --build-arg myuser=gitlab-ci-token --pull --no-cache -t $CI_REGISTRY_IMAGE/jeod_ubuntu18:$CONTAINER_MASTER_TAG .
    - docker push $CI_REGISTRY_IMAGE/jeod_ubuntu18:$CONTAINER_MASTER_TAG
  when: manual
