set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_OSX_DEPLOYMENT_TARGET "" CACHE STRING "Force unset of the deployment target for iOS" FORCE)

get_filename_component(JEOD_HOME "${CMAKE_CURRENT_LIST_DIR}/../.." ABSOLUTE)

# Check for command-line var, then env var and set cmake var
if(TRICK_BUILD)
   if(NOT DEFINED TRICK_HOME)
      if(NOT DEFINED ENV{TRICK_HOME})
         execute_process(COMMAND trick-config --prefix OUTPUT_VARIABLE TRICK_HOME)
         string(REPLACE "\n" "" TRICK_HOME ${TRICK_HOME})
         if(NOT DEFINED TRICK_HOME)
            message(FATAL_ERROR "TRICK_BUILD set but TRICK_HOME not defined. It can be defined in environment, passed via -DTRICK_HOME=, or TRICK_HOME/bin can be added to PATH.")
         endif()
         set(ER7_UTILS_HOME ${TRICK_HOME}/trick_source)
      else()
         set(TRICK_HOME $ENV{TRICK_HOME})
         set(ER7_UTILS_HOME $ENV{TRICK_HOME}/trick_source)
      endif()
   else()
      set(ER7_UTILS_HOME ${TRICK_HOME}/trick_source)
   endif()
   execute_process(COMMAND ${TRICK_HOME}/bin/trick-version -y OUTPUT_VARIABLE TRICK_VERSION)
   if(NOT CONFIG_PRINT)
      message(STATUS "TRICK_BUILD defined with TRICK_HOME=${TRICK_HOME} TRICK_VER=${TRICK_VERSION}")
   endif()
   string(STRIP ${TRICK_VERSION} TRICK_VERSION)
   include_directories(SYSTEM ${TRICK_HOME}/include)
   include_directories(SYSTEM ${TRICK_HOME}/include/trick/compat)
   include_directories(SYSTEM ${TRICK_HOME}/trick_source)
   add_definitions(-DTRICK_VER=${TRICK_VERSION})
else()
   if(NOT DEFINED ER7_UTILS_HOME)
      if(NOT DEFINED ENV{ER7_UTILS_HOME})
         if(NOT DEFINED TRICK_HOME)
           if(NOT DEFINED ENV{TRICK_HOME})
              execute_process(COMMAND trick-config --prefix OUTPUT_VARIABLE TRICK_HOME)
              string(REPLACE "\n" "" TRICK_HOME ${TRICK_HOME})
              if(NOT DEFINED TRICK_HOME)
                 message(FATAL_ERROR "NON-TRICK_BUILD detected but ER7_UTILS_HOME or TRICK_HOME not defined. They can be defined in environment, passed via -DER7_UTILS_HOME= or -DTRICK_HOME=, or TRICK_HOME/bin can be added to PATH.")
              endif()
              set(ER7_UTILS_HOME ${TRICK_HOME}/trick_source)
           else()
              set(ER7_UTILS_HOME $ENV{TRICK_HOME}/trick_source)
           endif()
         else()
           set(ER7_UTILS_HOME ${TRICK_HOME}/trick_source)
         endif()
      else()
         set(ER7_UTILS_HOME $ENV{ER7_UTILS_HOME})
      endif()
   endif()
   if(NOT DEFINED JEOD_CONFIG_HEADER)
      if(NOT DEFINED ENV{JEOD_CONFIG_HEADER})
         set(JEOD_CONFIG_HEADER "config_test_harness.hh")
      else()
         set(JEOD_CONFIG_HEADER "$ENV{JEOD_CONFIG_HEADER}")
      endif()
   endif()
   add_definitions(-DJEOD_CONFIG_HEADER="${JEOD_CONFIG_HEADER}")

   include_directories(SYSTEM ${ER7_UTILS_HOME})
   if(NOT CONFIG_PRINT)
      message(STATUS "NON-TRICK_BUILD detected with ER7_UTILS_HOME=${ER7_UTILS_HOME} and JEOD_CONFIG_HEADER=${JEOD_CONFIG_HEADER}")
   endif()
endif()
add_definitions(-DUSE_ER7_UTILS_INTEGRATORS)

if(NOT DEFINED JEOD_SPICE_DIR)
   if(NOT DEFINED ENV{JEOD_SPICE_DIR})
      if(EXISTS /data/cspice)
         set(JEOD_SPICE_DIR /data/cspice)
      endif()
   else()
      set(JEOD_SPICE_DIR $ENV{JEOD_SPICE_DIR})
   endif()
endif()
if(NOT EXISTS ${JEOD_SPICE_DIR}/include/SpiceUsr.h)
   if(NOT CONFIG_PRINT)
      message(WARNING "Unable to find SpiceUsr.h. Disabling spice build.")
   endif()
   unset(JEOD_SPICE_DIR)
else()
   if(NOT CONFIG_PRINT)
      message(STATUS "JEOD_SPICE_DIR appears valid and set to ${JEOD_SPICE_DIR}")
   endif()
   include_directories(SYSTEM ${JEOD_SPICE_DIR}/include)
endif()

if(NOT DEFINED INSTALL_DIR)
set(INSTALL_DIR ${JEOD_HOME}/lib_jeod)
endif()
get_filename_component(INSTALL_DIR "${INSTALL_DIR}" ABSOLUTE)

if(ENABLE_UNIT_TESTS)
   if(NOT CONFIG_PRINT)
      message(STATUS "ENABLE_UNIT_TESTS detected. Compiling for unit tests with coverage.")
   endif()
   add_definitions(-DJEOD_UNIT_TEST)
   if(CMAKE_C_COMPILER_ID MATCHES "(Apple)?[Cc]lang" OR CMAKE_CXX_COMPILER_ID MATCHES "(Apple)?[Cc]lang")
      if(NOT DEFINED GTEST_HOME)
         if(NOT DEFINED ENV{GTEST_HOME})
            if(NOT CONFIG_PRINT)
               message(WARNING "GTEST_HOME is not defined for a Mac build. Defaulting to /opt/homebrew but unit tests may not build")
            endif()
            set(GTEST_HOME /opt/homebrew)
         else()
            set(GTEST_HOME $ENV{GTEST_HOME})
         endif()
      endif()
      set(UT_COVERAGE_INCLUDE_FLAGS "-I${GTEST_HOME}/include")
      set(UT_COVERAGE_COMPILE_FLAGS "-fno-exceptions -fprofile-instr-generate -fcoverage-mapping")
      set(UT_COVERAGE_LINK_FLAGS "-fprofile-instr-generate -fcoverage-mapping -L${GTEST_HOME}/lib")
   else()
      if(NOT DEFINED GTEST_HOME)
         if(NOT DEFINED ENV{GTEST_HOME})
            if(NOT CONFIG_PRINT)
               message(STATUS "GTEST_HOME is not defined for a Linux build. Defaulting to /usr but unit tests may not build")
            endif()
            set(GTEST_HOME /usr)
         else()
            set(GTEST_HOME $ENV{GTEST_HOME})
         endif()
      endif()
      set(UT_COVERAGE_INCLUDE_FLAGS "-I${GTEST_HOME}/include")
      set(UT_COVERAGE_COMPILE_FLAGS "-fno-exceptions -fprofile-arcs -ftest-coverage")
      set(UT_COVERAGE_LINK_FLAGS "-fprofile-arcs -ftest-coverage")
   endif()
endif()
set(CONFIG_PRINT TRUE)
