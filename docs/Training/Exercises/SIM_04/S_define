//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//===========================TRICK HEADER=====================
// PURPOSE:
//=============================================================================
// This simulation provides an example of a simple of JEOD simulation,
// and makes use of the available JEOD S_modules. The purpose it to illistrate
// the use of scheduled class jobs, call intervals, and default data jobs.
//
//          sys - Trick runtime executive and data recording routines
//         time - Universal time
//     dynamics - Orbital dynamics
//     vehicle - Vehicle dynamics model
//
//=============================================================================


// Define job calling intervals
#define DYNAMICS       0.5

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#include "time_dyntime_only.sm"

// Include headers for classes that this class contains:
##include "dynamics/dyn_manager/include/dyn_manager.hh"
##include "dynamics/dyn_manager/include/dyn_manager_init.hh"
##include "dynamics/body_action/include/body_action.hh"
##include "er7_utils/integration/rk4/include/rk4_integrator_constructor.hh"
##include "er7_utils/integration/abm4/include/abm4_integrator_constructor.hh"
##include "er7_utils/integration/euler/include/euler_integrator_constructor.hh"

class DynamicsSimObject: public Trick::SimObject
{
public:
    jeod::DynManager dyn_manager;
    jeod::DynManagerInit dyn_manager_init;
    er7_utils::EulerIntegratorConstructor euler_integrator;

    // Constructor
    DynamicsSimObject(jeod::TimeManager & time_manager_in)
        : time_manager(time_manager_in)
    {
        //
        // Initialization jobs
        //
        P_MNGR("initialization") dyn_manager.initialize_model(dyn_manager_init, time_manager);
        P_MNGR_INIT_SIM("initialization") dyn_manager.initialize_simulation();

        //
        // Environment class jobs
        //
        (DYNAMICS, "environment") dyn_manager.update_ephemerides();
        (DYNAMICS, "environment") dyn_manager.perform_actions();

        //
        // Derivative class jobs
        //
        P_GRAV("derivative") dyn_manager.gravitation();
        ("derivative") dyn_manager.compute_derivatives();

        //
        // Integration jobs
        //
        ("integration", &dyn_manager.sim_integrator)
            trick_ret = dyn_manager.integrate(exec_get_sim_time(), time_manager);
    }

private:
    // Reference to the external time manager.
    jeod::TimeManager & time_manager;

    // Unimplemented copy constructor and assignment operator
    DynamicsSimObject(const DynamicsSimObject &);
    DynamicsSimObject & operator=(const DynamicsSimObject &);
};

DynamicsSimObject dynamics(jeod_time.time_manager);

// Include a basic vehicle class and object
#include "vehicle_basic.sm"

IntegLoop sim_integ_loop(DYNAMICS) dynamics;
