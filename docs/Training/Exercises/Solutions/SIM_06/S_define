//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//=============================================================================
// Illustrates the addition of new clocks.  This sim is largely redundant
// because most applications will use one of the pre-packaged time modules.
//
//=============================================================================

// Define job calling intervals
#define DYNAMICS 1.0

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

// Time Object.  No time S_module available.
##include "environment/time/include/time_manager.hh"
##include "environment/time/include/time_manager_init.hh"

##include "environment/time/include/time_tai.hh"
##include "environment/time/include/time_utc.hh"

##include "environment/time/include/time_converter_dyn_tai.hh"
##include "environment/time/include/time_converter_tai_utc.hh"

##include "environment/time/data/include/tai_to_utc.hh"

class JeodTimeSimObject : public Trick::SimObject
{
public:
    jeod::TimeManager time_manager;
    jeod::TimeManagerInit time_manager_init;

    // Time Scales
    jeod::TimeTAI time_tai;
    jeod::TimeUTC time_utc;

    // Time Converters
    jeod::TimeConverter_Dyn_TAI conv_dyn_tai;
    jeod::TimeConverter_TAI_UTC conv_tai_utc;

    // Instances for default data:
    jeod::TimeConverter_TAI_UTC_tai_to_utc_default_data tai_utc_default_data;

    JeodTimeSimObject()
    {
        //
        // Default data jobs
        //

        ("default_data") tai_utc_default_data.initialize(&conv_tai_utc);

        //
        // Initialization jobs
        //

        // TAI
        P_TIME("initialization") time_manager.register_time(time_tai);
        P_TIME("initialization") time_manager.register_converter(conv_dyn_tai);

        // UTC
        P_TIME("initialization") time_manager.register_time(time_utc);
        P_TIME("initialization") time_manager.register_converter(conv_tai_utc);

        // Initialize the time manager.
        P_TIME("initialization") time_manager.initialize(&time_manager_init);

        // Compute appropriate calendar dates at initialization.
        P_TIME("initialization") time_utc.calendar_update(exec_get_sim_time());

        //
        // Scheduled jobs
        //
        // Update Time Scales
        (DYNAMICS, "environment") time_manager.update(exec_get_sim_time());

        // Update the calendar times of interest.
        (DYNAMICS, "environment") time_utc.calendar_update(exec_get_sim_time());
    }

private:
    // This object is not copyable
    JeodTimeSimObject(const JeodTimeSimObject &);
    JeodTimeSimObject & operator=(const JeodTimeSimObject &);
};

JeodTimeSimObject jeod_time;

// Include the most dynamics class and object suitable for integrating
#include "dynamics.sm"

// Include a basic vehicle class and object
#include "vehicle_basic.sm"

// Set the integration
IntegLoop sim_integ_loop(DYNAMICS) dynamics;
