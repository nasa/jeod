//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//=============================================================================
// A single vehicle in Earth orbit with lunar, solar perturbations and
//  solid-body tides.
//
//=============================================================================

// Define job calling intervals
#define DYNAMICS 1.0
#define LOW_RATE_ENV 100.0

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#include "time_TAI_UTC_UT1_TT_GMST.sm"

#include "dynamics.sm"
#include "environment.sm"

//=============================================================================
// SIM_OBJECT: EarthSimObject
// This sim object models Earth using the GGM05C gravity model
// and RNP model.
//=============================================================================

// Headers for classes this contains:
##include "environment/gravity/include/spherical_harmonics_solid_body_tides.hh"
##include "environment/gravity/include/spherical_harmonics_solid_body_tides_init.hh"
##include "environment/gravity/data/include/earth_solid_tides.hh"

#include "Base/earth_GGM05C_baseline.sm"
class EarthSimObject : public Earth_GGM05C_SimObject
{
public:
    jeod::SphericalHarmonicsSolidBodyTidesInit sbtide_init;
    jeod::SphericalHarmonicsSolidBodyTides sb_tide;

    jeod::SphericalHarmonicsSolidBodyTidesInit_earth_solid_tides_default_data sbtide_init_default_data;

    EarthSimObject(jeod::DynManager & dyn_manager_in,
                   jeod::GravityManager & grav_in,
                   jeod::TimeTT & tt_in,
                   jeod::TimeUT1 & ut1_in,
                   jeod::TimeGMST & gmst_in)
        : Earth_GGM05C_SimObject(dyn_manager_in, grav_in, tt_in, ut1_in, gmst_in)
    {
        ("default_data") sbtide_init_default_data.initialize(&sbtide_init);

        //
        // Initialization jobs
        //
        P_EPH("initialization") gravity_source.add_deltacoeff(sbtide_init, dyn_manager, sb_tide);
    }

private:
    EarthSimObject(const EarthSimObject &);
    EarthSimObject & operator=(const EarthSimObject &);
};

EarthSimObject earth(
    dynamics.dyn_manager, env.gravity_manager, jeod_time.time_tt, jeod_time.time_ut1, jeod_time.time_gmst);

#include "moon_basic.sm"
#include "sun_basic.sm"

//***************************************************************
// CLASS: (VehicleSimObject)
// PURPOSE:
//  ( This sim object models a very basic vehicle.)
//***************************************************************
##include "environment/gravity/include/spherical_harmonics_delta_controls.hh"

#include "Base/vehicle_baseline.sm"
class VehicleSimObject : public VehicleBasicSimObject
{
public:
    jeod::SphericalHarmonicsDeltaControls sbtide_ctrl;

    VehicleSimObject(jeod::DynManager & dyn_mngr_in)
        : VehicleBasicSimObject(dyn_mngr_in)
    {
    }

private:
    VehicleSimObject(const VehicleSimObject &);
    VehicleSimObject & operator=(const VehicleSimObject &);
};
VehicleSimObject vehicle(dynamics.dyn_manager);
// Set the integration
IntegLoop sim_integ_loop(DYNAMICS) dynamics, earth;
