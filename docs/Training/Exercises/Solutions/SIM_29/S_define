//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//=============================================================================
// Two vehicles in Earth orbit with contact model
//
//=============================================================================

// Define job calling intervals
#define DYNAMICS 1.0

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#include "time_dyntime_only.sm"

#include "dynamics.sm"
#include "vehicle_basic.sm"
VehicleSimObject vehicleB(dynamics.dyn_manager);

/*****************************************************************************
Purpose:(Contact model simulation)
*****************************************************************************/
##include "utils/surface_model/include/flat_plate_circular.hh"
##include "utils/surface_model/include/surface_model.hh"
##include "interactions/contact/include/contact_surface.hh"
##include "interactions/contact/include/contact_surface_factory.hh"
##include "interactions/contact/include/contact_params.hh"
##include "interactions/contact/include/spring_pair_interaction.hh"
##include "interactions/contact/include/contact.hh"
class InteractionSimObject : public Trick::SimObject
{
public:
    jeod::SurfaceModel veh_surface;
    jeod::SurfaceModel vehB_surface;
    jeod::FlatPlateCircular * flat_plate;
    jeod::SpringPairInteraction * pair_interact;

    jeod::ContactSurface veh_contact_surface;
    jeod::ContactSurface vehB_contact_surface;
    jeod::ContactSurfaceFactory contact_surface_factory;
    jeod::Contact contact;

    InteractionSimObject(jeod::DynManager & dyn_mngr_in)
        : dyn_mngr(dyn_mngr_in)
    {
        P_BODY("initialization") veh_surface.initialize_mass_connections(dyn_mngr);
        P_BODY("initialization") vehB_surface.initialize_mass_connections(dyn_mngr);
        P_BODY("initialization") contact_surface_factory.create_surface(&veh_surface, &veh_contact_surface);
        P_BODY("initialization") contact_surface_factory.create_surface(&vehB_surface, &vehB_contact_surface);
        P_DYN("initialization") contact.initialize_contact(&dyn_mngr);
        P_DYN("initialization")
        contact.register_contact(veh_contact_surface.contact_facets[0], vehB_contact_surface.contact_facets[0]);

        /////////////////////////////////////////
        ("derivative") contact.check_contact();
        ("derivative") veh_contact_surface.collect_forces_torques();
        ("derivative") vehB_contact_surface.collect_forces_torques();
    }

private:
    InteractionSimObject(const InteractionSimObject &);
    InteractionSimObject & operator=(const InteractionSimObject &);

    jeod::DynManager & dyn_mngr;
};

InteractionSimObject interactions(dynamics.dyn_manager);

/*****************************************************************************
Purpose:(Collect forces/torques)
*****************************************************************************/
vcollect vehicle.dyn_body.collect.collect_environ_forc jeod::CollectForce::create{
    interactions.veh_contact_surface.contact_force};
vcollect vehicleB.dyn_body.collect.collect_environ_forc jeod::CollectForce::create{
    interactions.vehB_contact_surface.contact_force};
vcollect vehicle.dyn_body.collect.collect_environ_torq jeod::CollectTorque::create{
    interactions.veh_contact_surface.contact_torque};
vcollect vehicleB.dyn_body.collect.collect_environ_torq jeod::CollectTorque::create{
    interactions.vehB_contact_surface.contact_torque};

// Set the integration
IntegLoop sim_integ_loop(DYNAMICS) dynamics, interactions;
