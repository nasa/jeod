//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//=============================================================================
// Single vehicle in Earth orbit with articulating arrays
//
//=============================================================================

// Define job calling intervals
#define DYNAMICS 1.0

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#include "time_dyntime_only.sm"

#include "dynamics_init_only.sm"

//***************************************************************
// CLASS: (VehicleSimObject)
// PURPOSE:
//  ( This sim object models a very basic vehicle.)
//***************************************************************

##include "dynamics/dyn_body/include/dyn_body.hh"
##include "dynamics/body_action/include/dyn_body_init_trans_state.hh"
##include "dynamics/body_action/include/dyn_body_init_rot_state.hh"
##include "dynamics/body_action/include/mass_body_init.hh"

##include "dynamics/mass/include/mass.hh"
##include "dynamics/body_action/include/body_attach_matrix.hh"
##include "dynamics/body_action/include/body_reattach.hh"

##include "utils/surface_model/include/surface_model.hh"
##include "utils/surface_model/include/flat_plate.hh"


class VehicleSimObject : public Trick::SimObject
{
public:
    //
    // Data structures
    //
    jeod::DynBody dyn_body;

    jeod::DynBodyInitTransState trans_init;
    jeod::DynBodyInitRotState rot_init;
    jeod::MassBodyInit mass_init;

    jeod::MassBody array;
    jeod::BodyAttachMatrix mass_attach;
    jeod::BodyReattach * reattachments;

    jeod::SurfaceModel surface;
    jeod::FlatPlate vehicle_plate;
    jeod::FlatPlate array_plate;

    VehicleSimObject(jeod::DynManager & dyn_mngr_in)
        : dyn_manager(dyn_mngr_in)
    {
        //
        // Initialization jobs
        //
        P_ENV("initialization") dyn_body.initialize_model(dyn_manager);

        P_ENV("initialization") dyn_manager.add_mass_body(array);

        P_BODY("initialization") surface.initialize_mass_connections(dyn_manager);

        (DYNAMICS, "environment") surface.update_articulation();
    }

private:
    VehicleSimObject(const VehicleSimObject &);
    VehicleSimObject & operator=(const VehicleSimObject &);

    jeod::DynManager & dyn_manager;
};

VehicleSimObject vehicle(dynamics.dyn_manager);

##include "environment/gravity/include/gravity_manager.hh"
// Set the integration
IntegLoop sim_integ_loop(DYNAMICS) dynamics;
