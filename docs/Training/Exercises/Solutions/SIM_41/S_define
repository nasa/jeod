//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//=============================================================================
// Creates a basic simulation with 2 vehicles.
//
//=============================================================================

#define DYNAMICS 1.0

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#include "integ_loop.sm"

#include "time_dyntime_only.sm"

#include "dynamics_multi_group.sm"
#include "earth_basic.sm"
#include "environment_sans_de405.sm"
#include "vehicle_basic.sm"
VehicleSimObject vehicle2(dynamics.dyn_manager);
VehicleSimObject vehicle3(dynamics.dyn_manager);

##include "dynamics/dyn_manager/include/dynamics_integration_group.hh"
##include "er7_utils/integration/rk4/include/rk4_integrator_constructor.hh"
class IntegrationSimObject: public Trick::SimObject
{
public:
    jeod::DynamicsIntegrationGroup group;
    er7_utils::RK4IntegratorConstructor rk4_constructor;
    er7_utils::IntegratorConstructor * rk4_constructor_ptr;
    IntegrationSimObject()
        : rk4_constructor_ptr(&rk4_constructor){};

private:
    IntegrationSimObject(const IntegrationSimObject &);
    IntegrationSimObject & operator=(const IntegrationSimObject &);
};

IntegrationSimObject integ;

JeodIntegLoopSimObject fast(0.005,
                            integ.rk4_constructor_ptr,
                            integ.group,
                            jeod_time.time_manager,
                            dynamics.dyn_manager,
                            env.gravity_manager,
                            &vehicle,
                            NULL);
JeodIntegLoopSimObject med(1.0,
                           integ.rk4_constructor_ptr,
                           integ.group,
                           jeod_time.time_manager,
                           dynamics.dyn_manager,
                           env.gravity_manager,
                           &vehicle2,
                           NULL);
JeodIntegLoopSimObject slow(100,
                            integ.rk4_constructor_ptr,
                            integ.group,
                            jeod_time.time_manager,
                            dynamics.dyn_manager,
                            env.gravity_manager,
                            &vehicle3,
                            NULL);
