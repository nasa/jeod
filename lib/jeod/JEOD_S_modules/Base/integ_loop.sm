//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
/*******************************************************************************
 * This file defines a simulation object that provides an alternative mechanism
 * for integrating state.
 ******************************************************************************/
#ifndef SIM_OBJECT_INTEG_LOOP
#define SIM_OBJECT_INTEG_LOOP

// Include headers for classes that this class contains:
##include "er7_utils/integration/core/include/integrator_constructor.hh"
##include "dynamics/dyn_manager/include/dynamics_integration_group.hh"
##include "environment/time/include/time_manager.hh"
##include "dynamics/dyn_manager/include/dyn_manager.hh"
##include "environment/gravity/include/gravity_manager.hh"
##include "utils/sim_interface/include/trick_dynbody_integ_loop.hh"

##include <cstdarg>

class JeodIntegLoopSimObject: public Trick::SimObject
{
public:
    jeod::JeodDynbodyIntegrationLoop integ_loop;

    /**
     * Default constructor.
     * @note This exists only for the purpose of automated checkpoint/restart.
     * @warn Do not use the default constructor outside of this context.
     */
    JeodIntegLoopSimObject()
        : integ_loop()
    {
    }

    /**
     * Non-default constructor.
     * The last set of arguments are the sim objects to be integrated.
     * The final argument must be null.
     */
    JeodIntegLoopSimObject(double integ_cycle,
                           er7_utils::IntegratorConstructor *& integ_cotr_in,
                           jeod::DynamicsIntegrationGroup & integ_group_in,
                           jeod::TimeManager & time_manager_in,
                           jeod::DynManager & dyn_manager_in,
                           jeod::GravityManager & grav_manager_in,
                           Trick::SimObject * sim_obj1,
                           ...)
        : integ_loop(integ_cycle,
                     *this,
                     time_manager_in,
                     dyn_manager_in,
                     grav_manager_in,
                     integ_cotr_in,
                     integ_group_in)
    {
        va_list args;
        Trick::SimObject * sim_obj;

        va_start(args, sim_obj1);
        sim_obj = sim_obj1;
        while(sim_obj != nullptr)
        {
            integ_loop.add_sim_object(*sim_obj);
            sim_obj = va_arg(args, Trick::SimObject *);
        }
        va_end(args);

        //
        // Default data and initialization jobs
        //
        P0("default_data") exec_register_scheduler(&integ_loop);
        P1("initialization") integ_loop.initialize_integ_loop();
        P65535("initialization") integ_loop.call_deriv_jobs();

        //
        // Derivative and integration loop class jobs
        //
        ("pre_integration") integ_loop.set_time_to_loop_start();
        P_GRAV("derivative") integ_loop.gravitation();
        P_ILOOP("derivative") integ_loop.collect_derivatives();
        (integ_cycle, "integ_loop") integ_loop.integrate();

        //
        // Checkpoint and restart class jobs
        //
##if TRICK_VER < 17
        CHECKPOINT_STL(integ_loop.sim_objects);
##endif

        P0("preload_checkpoint") integ_loop.restart_checkpoint();
        ("restart") integ_loop.rebuild_jobs();
    }

    JeodIntegLoopSimObject(const JeodIntegLoopSimObject &) = delete;
    JeodIntegLoopSimObject & operator=(const JeodIntegLoopSimObject &) = delete;
};
#endif
