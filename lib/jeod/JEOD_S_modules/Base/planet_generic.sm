//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
/*************     TRICK HEADER     ******************************************
PlanetGenericSimObject
Purpose:( This sim object models a planet without a gravity model.
          It is intended as a base-class to which planet-specific data and
          a gravity model may be added;
          while its abstract nature is not enforced, I can think of no
          direct application of this sim object.
*****************************************************************************/
#ifndef SIM_OBJECT_PLANET_GENERIC
#define SIM_OBJECT_PLANET_GENERIC

// Include headers for classes that this class contains:
##include "dynamics/dyn_manager/include/dyn_manager.hh"
##include "environment/gravity/include/gravity_manager.hh"
##include "environment/planet/include/planet.hh"
##include "environment/gravity/include/spherical_harmonics_gravity_source.hh"

class PlanetGenericSimObject: public Trick::SimObject
{
protected:
    // External references
    jeod::DynManager & dyn_manager;
    jeod::GravityManager & grav_manager;

    // Internal references from sub-classes
    jeod::Planet_default_data & planet_default_data;
    jeod::SphericalHarmonicsGravitySource_default_data & gravity_default_data;

public:
    jeod::Planet planet;
    jeod::SphericalHarmonicsGravitySource gravity_source;

    // Constructor
    PlanetGenericSimObject(jeod::DynManager & dyn_manager_in,
                           jeod::GravityManager & grav_in,
                           jeod::Planet_default_data & planet_dd,
                           jeod::SphericalHarmonicsGravitySource_default_data & gravity_dd)
        : dyn_manager(dyn_manager_in),
          grav_manager(grav_in),
          planet_default_data(planet_dd),
          gravity_default_data(gravity_dd)
    {
        ("default_data") planet_default_data.initialize(&planet);
        ("default_data") gravity_default_data.initialize(&gravity_source);
        //
        // Initialization jobs
        //
        P_ENV("initialization") gravity_source.initialize_body();
        P_ENV("initialization") grav_manager.add_grav_source(gravity_source);
        P_ENV("initialization") planet.register_model(gravity_source, dyn_manager);
        P_EPH("initialization") planet.initialize();
    }

    // Unimplemented copy constructor and assignment operator
    PlanetGenericSimObject(const PlanetGenericSimObject &) = delete;
    PlanetGenericSimObject & operator=(const PlanetGenericSimObject &) = delete;
};
#endif
