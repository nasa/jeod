//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
/*************     TRICK HEADER     ******************************************
VehicleBasicSimObject
Purpose:( This sim object models a vehicle operating within an atmosphere.)
*****************************************************************************/
#ifndef SIM_OBJECT_VEHICLE_WITH_ATMOSPHERE
#define SIM_OBJECT_VEHICLE_WITH_ATMOSPHERE

##include "environment/atmosphere/base_atmos/include/atmosphere.hh"
##include "environment/atmosphere/MET/include/MET_atmosphere.hh"
##include "dynamics/derived_state/include/planetary_derived_state.hh"
##include "environment/atmosphere/base_atmos/include/wind_velocity.hh"

#include "vehicle_baseline.sm"
class VehicleAtmSimObject : public VehicleBasicSimObject
{
protected:
    // External references
    jeod::METAtmosphere & atmos;
    jeod::WindVelocity & wind;

public:
    jeod::AtmosphereState atmos_state;
    jeod::PlanetaryDerivedState pfix;

    VehicleAtmSimObject(jeod::DynManager & dyn_mngr_in, jeod::METAtmosphere & atmos_in, jeod::WindVelocity & wind_in)
        : VehicleBasicSimObject(dyn_mngr_in),
          atmos(atmos_in),
          wind(wind_in)
    {
        //
        // Initialization jobs
        //
        P_BODY("initialization") pfix.initialize(dyn_body, dyn_manager);
        P_BODY("initialization") pfix.update();

        P_DYN("initialization") atmos_state.update_state(&atmos, &pfix.state);
        P_DYN("initialization")
        atmos_state.update_wind(&wind, dyn_body.composite_body.state.trans.position, pfix.state.ellip_coords.altitude);

        //
        // Environment class jobs
        //
        (DYNAMICS, "environment") pfix.update();

        (DYNAMICS, "environment") atmos_state.update_state(&atmos, &pfix.state);
        (DYNAMICS, "environment") atmos_state.update_wind(&wind,
                                                          dyn_body.composite_body.state.trans.position,
                                                          pfix.state.ellip_coords.altitude);
    }

    VehicleAtmSimObject(const VehicleAtmSimObject &) = delete;
    VehicleAtmSimObject & operator=(const VehicleAtmSimObject &) = delete;
};
#endif
