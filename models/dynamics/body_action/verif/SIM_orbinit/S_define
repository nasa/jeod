//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//===========================TRICK HEADER=====================
// PURPOSE:
/*******************************************************************************

Purpose:
  (This S_define file tests the ability to initialize the state of a DynBody.
   This simulation has no dynamics -- other than the Trick executive, it
   comprises initialization only.

   The following simulation objects are defined in this sim:
   - sys      Trick runtime executive and data recording routines
   - time     Time representations
   - dynamics Dynamic elements.)
   - env      Space environment -- gravity model only
   - earth    The Earth
   - target   An orbiting vehicle.
   - chaser   Another orbiting vehicle.
*******************************************************************************/

// This is an initialization-only sim, but the time model doesn't know that ...
#define DYNAMICS 1.0
#define LOW_RATE_ENV 1.0

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

// Include standard sim-objects
#include "time_TAI_UTC_UT1_TT_GMST.sm"

#include "dynamics_init_only.sm"
#include "environment_sans_de405.sm"

//***************************************************************
// CLASS: (EarthSimObject)
// PURPOSE:
//  ( This sim object models the Earth.)
//***************************************************************
#define JEOD_OVERRIDE_GGM02C_WITH_GEMT1
#include "Base/earth_GGM05C_baseline.sm"

// Include headers for classes that this class contains:
##include "dynamics/body_action/verif/SIM_orbinit/include/planet_site.hh"

class EarthSimObject: public Earth_GGM05C_SimObject
{
public:
    jeod::PlanetSite pad_39a;

    // Constructor
    EarthSimObject(JeodTimeSimObject & time_sim_object,
                   jeod::DynManager & dyn_manager,
                   jeod::GravityManager & gravity_manager)
        : Earth_GGM05C_SimObject(dyn_manager,
                                 gravity_manager,
                                 time_sim_object.time_tt,
                                 time_sim_object.time_ut1,
                                 time_sim_object.time_gmst)
    {
        P_DYN("initialization") pad_39a.initialize(planet, dyn_manager);
    }

    // Unimplemented copy constructor and assignment operator
    EarthSimObject(const EarthSimObject &) = delete;
    EarthSimObject & operator=(const EarthSimObject &) = delete;
};

EarthSimObject earth(jeod_time, dynamics.dyn_manager, env.gravity_manager);

//***************************************************************
// CLASS: (BaseVehicleSimObject)
// PURPOSE:
//  (This sim object provides the shared aspects of the target and chaser
//  vehicles.  Could use Base/vehicle_baseline.sm as the basis for this
//  class, but chose to replicate those foundational contents in this class
//  definition rather than bury content in another level of inheritance.)
//***************************************************************
##include "dynamics/dyn_body/include/dyn_body.hh"
##include "dynamics/body_action/include/mass_body_init.hh"
##include "dynamics/body_action/include/dyn_body_init_trans_state.hh"
##include "dynamics/body_action/include/dyn_body_init_rot_state.hh"
##include "dynamics/body_action/include/dyn_body_init_lvlh_state.hh"
##include "dynamics/body_action/include/dyn_body_init_lvlh_rot_state.hh"
##include "dynamics/body_action/include/dyn_body_init_ned_state.hh"
##include "dynamics/body_action/include/dyn_body_init_ned_trans_state.hh"
##include "dynamics/body_action/include/dyn_body_init_ned_rot_state.hh"
##include "environment/gravity/include/spherical_harmonics_gravity_controls.hh"

class BaseVehicleSimObject  : public Trick::SimObject
{
public:
    jeod::DynBody dyn_body;
    jeod::MassBodyInit mass_init;
    jeod::DynBodyInitTransState trans_init;
    jeod::DynBodyInitRotState att_init;
    jeod::DynBodyInitRotState rate_init;
    jeod::DynBodyInitLvlhState lvlh_init;
    jeod::DynBodyInitLvlhTransState lvlh_trans_init;
    jeod::DynBodyInitLvlhRotState lvlh_att_init;
    jeod::DynBodyInitLvlhRotState lvlh_rate_init;
    jeod::DynBodyInitNedState ned_init;
    jeod::DynBodyInitNedTransState ned_trans_init;
    jeod::DynBodyInitNedRotState ned_att_init;
    jeod::DynBodyInitNedRotState ned_rate_init;

    jeod::SphericalHarmonicsGravityControls earth_grav_ctrl;

    // Constructor
    BaseVehicleSimObject(jeod::DynManager & dyn_manager_in)
        : dyn_manager(dyn_manager_in)
    {
        P_ENV("initialization") dyn_body.initialize_model(dyn_manager);
    }

    // Unimplemented copy constructor and assignment operator
    BaseVehicleSimObject(const BaseVehicleSimObject &) = delete;
    BaseVehicleSimObject & operator=(const BaseVehicleSimObject &) = delete;

protected:
    // References to items from other sim objects
    jeod::DynManager & dyn_manager;
};

//***************************************************************
// CLASS: (TargetSimObject)
// PURPOSE:
//  (This sim object models a target vehicle.)
//***************************************************************
// Include headers for classes that this class contains:
##include "dynamics/body_action/include/dyn_body_init_orbit.hh"
##include "dynamics/derived_state/include/lvlh_derived_state.hh"
##include "dynamics/derived_state/include/ned_derived_state.hh"
##include "utils/orbital_elements/include/orbital_elements.hh"
##include "utils/ref_frames/include/ref_frame_state.hh"

class TargetSimObject: public BaseVehicleSimObject
{
public:
    jeod::DynBodyInitOrbit orb_init;
    jeod::LvlhDerivedState lvlh;
    jeod::NedDerivedState ned;
    jeod::OrbitalElements orb_elem;
    jeod::RefFrameState expected_state;

    // Constructor
    TargetSimObject(jeod::DynManager & dyn_manager_in, jeod::GravitySource & grav_source_in)
        : BaseVehicleSimObject(dyn_manager_in),
          planet_mu(grav_source_in.mu)
    {
        P_DYN("initialization") lvlh.initialize(dyn_body, dyn_manager);
        P_DYN("initialization") lvlh.update();
        P_DYN("initialization") ned.initialize(dyn_body, dyn_manager);
        P_DYN("initialization") ned.update();
        P_DYN("initialization")
        orb_elem.from_cartesian(planet_mu,
                                dyn_body.composite_body.state.trans.position,
                                dyn_body.composite_body.state.trans.velocity);
    }

    // Unimplemented copy constructor and assignment operator
    TargetSimObject(const TargetSimObject &) = delete;
    TargetSimObject & operator=(const TargetSimObject &) = delete;

private:
    // References to items from other sim objects
    const double & planet_mu;
};

TargetSimObject target(dynamics.dyn_manager, earth.gravity_source);

//***************************************************************
// CLASS: (ChaserSimObject)
// PURPOSE:
//  (This sim object models a chasing vehicle.)
//***************************************************************

// Include headers for classes that this class contains:
##include "dynamics/body_action/include/dyn_body_init_lvlh_trans_state.hh"

class ChaserSimObject: public BaseVehicleSimObject
{
public:
    jeod::DynBodyInitLvlhTransState lvlh_trans_init;

    // Constructor
    ChaserSimObject(jeod::DynManager & dyn_manager_in)
        : BaseVehicleSimObject(dyn_manager_in)
    {
    }

    // Unimplemented copy constructor and assignment operator
    ChaserSimObject(const ChaserSimObject &) = delete;
    ChaserSimObject & operator=(const ChaserSimObject &) = delete;
};

ChaserSimObject chaser(dynamics.dyn_manager);

//***************************************************************
// CLASS: (TargetRelStateSimObject)
// PURPOSE:
//  (Computes relative state for the target dyn body.)
//***************************************************************

// Include headers for classes that this class contains:
##include "dynamics/derived_state/include/relative_derived_state.hh"

class TargetRelStateSimObject: public Trick::SimObject
{
public:
    jeod::RelativeDerivedState tstruct_wrt_pad39a;
    jeod::RelativeDerivedState tbody_wrt_pfix;
    jeod::RelativeDerivedState tbody_wrt_tlvlh;
    jeod::RelativeDerivedState tbody_wrt_tned;

    // Constructor
    TargetRelStateSimObject(jeod::DynManager & dyn_manager_in, jeod::DynBody & target_body_in)
        : dyn_manager(dyn_manager_in),
          target_body(target_body_in)
    {
        //
        // Initialization jobs
        //
        P_DYN("initialization") tstruct_wrt_pad39a.initialize(target_body, dyn_manager);
        P_DYN("initialization") tstruct_wrt_pad39a.update();
        P_DYN("initialization") tbody_wrt_pfix.initialize(target_body, dyn_manager);
        P_DYN("initialization") tbody_wrt_pfix.update();
        P_DYN("initialization") tbody_wrt_tlvlh.initialize(target_body, dyn_manager);
        P_DYN("initialization") tbody_wrt_tlvlh.update();
        P_DYN("initialization") tbody_wrt_tned.initialize(target_body, dyn_manager);
        P_DYN("initialization") tbody_wrt_tned.update();
    }

    // Unimplemented copy constructor and assignment operator
    TargetRelStateSimObject(const TargetRelStateSimObject &) = delete;
    TargetRelStateSimObject & operator=(const TargetRelStateSimObject &) = delete;

private:
    // References to items from other sim objects
    jeod::DynManager & dyn_manager;
    jeod::DynBody & target_body;
};

TargetRelStateSimObject target_rel_state(dynamics.dyn_manager, target.dyn_body);

//***************************************************************
// CLASS: (ChaserRelStateSimObject)
// PURPOSE:
//  (Computes relative state for the chaser dyn body.)
//***************************************************************


// Include headers for classes that this class contains:
##include "dynamics/derived_state/include/relative_derived_state.hh"

class ChaserRelStateSimObject: public Trick::SimObject
{
public:
    jeod::RelativeDerivedState cbody_wrt_tbody;
    jeod::RelativeDerivedState cbody_wrt_tlvlh;
    jeod::RelativeDerivedState cbody_wrt_tned;
    jeod::RelativeDerivedState cstruct_wrt_tbody;
    jeod::RelativeDerivedState cstruct_wrt_tstruct;
    jeod::RelativeDerivedState cstruct_wrt_tned;
    jeod::RelativeDerivedState cpoint_wrt_tpoint;

    // Constructor

    // Constructor
    ChaserRelStateSimObject(jeod::DynManager & dyn_manager_in, jeod::DynBody & chaser_body_in)
        : dyn_manager(dyn_manager_in),
          chaser_body(chaser_body_in)
    {
        //
        // Initialization jobs
        //
        P_DYN("initialization") cbody_wrt_tbody.initialize(chaser_body, dyn_manager);
        P_DYN("initialization") cbody_wrt_tbody.update();
        P_DYN("initialization") cbody_wrt_tlvlh.initialize(chaser_body, dyn_manager);
        P_DYN("initialization") cbody_wrt_tlvlh.update();
        P_DYN("initialization") cbody_wrt_tned.initialize(chaser_body, dyn_manager);
        P_DYN("initialization") cbody_wrt_tned.update();
        P_DYN("initialization") cstruct_wrt_tbody.initialize(chaser_body, dyn_manager);
        P_DYN("initialization") cstruct_wrt_tbody.update();
        P_DYN("initialization") cstruct_wrt_tstruct.initialize(chaser_body, dyn_manager);
        P_DYN("initialization") cstruct_wrt_tstruct.update();
        P_DYN("initialization") cstruct_wrt_tned.initialize(chaser_body, dyn_manager);
        P_DYN("initialization") cstruct_wrt_tned.update();
        P_DYN("initialization") cpoint_wrt_tpoint.initialize(chaser_body, dyn_manager);
        P_DYN("initialization") cpoint_wrt_tpoint.update();
    }

    // Unimplemented copy constructor and assignment operator
    ChaserRelStateSimObject(const ChaserRelStateSimObject &) = delete;
    ChaserRelStateSimObject & operator=(const ChaserRelStateSimObject &) = delete;

private:
    // References to items from other sim objects
    jeod::DynManager & dyn_manager;
    jeod::DynBody & chaser_body;
};

ChaserRelStateSimObject chaser_rel_state(dynamics.dyn_manager, chaser.dyn_body);

IntegLoop sim_integ_loop(DYNAMICS) dynamics, earth;