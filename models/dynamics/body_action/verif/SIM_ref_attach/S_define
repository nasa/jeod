//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//========================== TRICK HEADER ======================================
// PURPOSE:
//==============================================================================
// This S_define file tests the ability to initialize the state of a DynBody
// using LVLH. This simulation has no dynamics -- other than the Trick
// executive, is comprised of initilization only.
//
// The following simulation objects
// are defined in this sim:
//
//          sys - Trick runtime executive and data recording routines
//     jeod_sys - JEOD system object
//    jeod_time - Time representations
//     dynamics - The dynamics manager
//          env - Space environment - gravity model only
//        earth - The earth
//       target - An orbiting vehicle
//       chaser - Another orbiting vehicle
//    rel_state - Relative states for answer checking
//
//==============================================================================

// This is an initialization-only sim, but the time model doesn't know that ...
#define LOW_RATE_ENV 60.00 // Low-rate environment update interval
#define DYNAMICS 1.0

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#define TIME_MODEL_UT1
#define TIME_MODEL_UTC
#define TIME_MODEL_TT
#define TIME_MODEL_GMST
#define TIME_CALENDAR_UPDATE_INTERVAL DYNAMICS
#include "jeod_time.sm"

#include "dynamics.sm"
#include "earth_GGM05C_MET_RNP.sm"
#include "environment_sans_de405.sm"

//***************************************************************
// CLASS: (VehicleSimObject)
// PURPOSE:
//  (This sim object models a simple vehicle.)
//***************************************************************
#include "Base/vehicle_baseline.sm"

// Include headers for classes that this class contains:
##include "dynamics/body_action/include/dyn_body_init_lvlh_state.hh"
##include "utils/lvlh_frame/include/lvlh_frame.hh"
##include "utils/ref_frames/include/ref_frame_state.hh"

class VehicleSimObject: public VehicleBasicSimObject
{
public:
    jeod::LvlhFrame lvlh;
    jeod::RefFrameState expected_state;

    jeod::DynBodyInitLvlhState lvlh_init;

    // Constructor
    VehicleSimObject(jeod::DynManager & dyn_manager_in)
        : VehicleBasicSimObject(dyn_manager_in)
    {
        P_ENV("initialization") lvlh.initialize(dyn_manager);
        P_DYN("initialization") lvlh.update();
        (DYNAMICS, "environment") lvlh.update();
    }

    // Unimplemented copy constructor and assignment operator
    VehicleSimObject(const VehicleSimObject &) = delete;
    VehicleSimObject & operator=(const VehicleSimObject &) = delete;
};

// Define target and chaser vehicles using the generic sim object
VehicleSimObject target(dynamics.dyn_manager);

//***************************************************************
// CLASS: (RelstateSimObject)
// PURPOSE:
//  (This object handles the relative states.)
//***************************************************************

// Include headers for classes that this class contains:
##include "dynamics/derived_state/include/lvlh_relative_derived_state.hh"

class RelstateSimObject: public Trick::SimObject
{
protected:
    // References to other sim objects:
    jeod::DynManager & dyn_manager;
    jeod::DynBody & target;

public:
    jeod::RelativeDerivedState target_in_pfix;

    // Constructor
    RelstateSimObject(jeod::DynManager & dyn_manager_in, jeod::DynBody & target_in)
        : dyn_manager(dyn_manager_in),
          target(target_in)
    {
        // Initialization jobs
        P_DYN("initialization") target_in_pfix.initialize(target, dyn_manager);

        // Environment class jobs
        (DYNAMICS, "environment") target_in_pfix.update();
    }

    RelstateSimObject(const RelstateSimObject &) = delete;
    RelstateSimObject & operator=(const RelstateSimObject &) = delete;
};

RelstateSimObject rel_state(dynamics.dyn_manager, target.dyn_body);

##include "dynamics/body_action/include/body_attach_aligned.hh"
##include "dynamics/body_action/include/body_attach_matrix.hh"

IntegLoop sim_integ_loop(DYNAMICS) dynamics, earth, target;
