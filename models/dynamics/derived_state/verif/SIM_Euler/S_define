//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
/*===========================TRICK HEADER=====================
 PURPOSE:
 This simulation is a demonstration simulation for the Euler Derived State
 model.

 The following simulation objects
 are defined in this sim:

          sys      - Trick runtime executive and data recording routines
         jeod_time - Universal time
         dynamics  - The dynamics manager
          env      - Environment: ephemeris, gravity initialization
        earth      - Managing Earth
          veh      - Orbiting vehicle
==============================================================================*/

// Define job calling intervals
#define DYNAMICS 1.00        // Moon/orbital dynamics interval
#define LOW_RATE_ENV 5400.00 // Ephemeris update frequency

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#include "time_TAI_UTC_UT1_TT_GMST.sm"

#include "dynamics.sm"
#include "earth_GGM05C.sm"
#include "environment.sm"

/*****************************************************************************
VehSimObject
Purpose:(Models the vehicle)
*****************************************************************************/
#include "Base/vehicle_baseline.sm"
##include "dynamics/derived_state/include/euler_derived_state.hh"
##include "dynamics/derived_state/include/lvlh_derived_state.hh"
##include "dynamics/body_action/include/dyn_body_init_orbit.hh"
##include "dynamics/body_action/include/dyn_body_init_lvlh_rot_state.hh"
class VehSimObject: public VehicleBasicSimObject
{
public:
    jeod::DynBodyInitOrbit init_orbit;
    jeod::DynBodyInitLvlhRotState init_lvlh;
    jeod::EulerDerivedState euler_rpy;
    jeod::EulerDerivedState euler_pyr_lvlh;
    jeod::EulerDerivedState euler_rpy_lvlh;
    jeod::EulerDerivedState euler_ypr_lvlh;
    jeod::EulerDerivedState euler_ryp_lvlh;
    jeod::EulerDerivedState euler_yrp_lvlh;
    jeod::LvlhDerivedState lvlh;

    // Constructor
    VehSimObject(jeod::DynManager & dyn_mngr_in)
        : VehicleBasicSimObject(dyn_mngr_in)
    {
        // Initialization jobs
        P_DYN("initialization") lvlh.initialize(dyn_body, dyn_manager);
        P_DYN("initialization") euler_rpy.initialize(dyn_body, dyn_manager);
        P_DYN("initialization") euler_rpy_lvlh.initialize(lvlh.lvlh_frame, dyn_body, dyn_manager);
        P_DYN("initialization") euler_pyr_lvlh.initialize(lvlh.lvlh_frame, dyn_body, dyn_manager);
        P_DYN("initialization") euler_ypr_lvlh.initialize(lvlh.lvlh_frame, dyn_body, dyn_manager);
        P_DYN("initialization") euler_yrp_lvlh.initialize(lvlh.lvlh_frame, dyn_body, dyn_manager);
        P_DYN("initialization") euler_ryp_lvlh.initialize(lvlh.lvlh_frame, dyn_body, dyn_manager);
        // Environment class jobs
        (DYNAMICS, "environment") lvlh.update();
        (DYNAMICS, "environment") euler_rpy.update();
        (DYNAMICS, "environment") euler_pyr_lvlh.update();
        (DYNAMICS, "environment") euler_rpy_lvlh.update();
        (DYNAMICS, "environment") euler_ypr_lvlh.update();
        (DYNAMICS, "environment") euler_ryp_lvlh.update();
        (DYNAMICS, "environment") euler_yrp_lvlh.update();
    }

    VehSimObject(const VehSimObject &) = delete;
    VehSimObject & operator=(const VehSimObject &) = delete;
};

VehSimObject veh(dynamics.dyn_manager);

IntegLoop sim_integ_loop(DYNAMICS) dynamics, earth;
