//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
/*========================== TRICK HEADER ======================================
PURPOSE:
This is a demonstration sim for the LVLH Relative Derived State model.

The following simulation objects
are defined in this sim:

         sys - Trick runtime executive and data recording routines
    jeod_sys - JEOD system object
   jeod_time - JEOD time object
    dynamics - The dynamics manager
    vehA - One vehicle
    vehB - Another vehicle
   rel_state - The relative states

=============================================================================*/

// Define job calling intervals
#define DYNAMICS 1.00 // Orbital dynamics interval

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#include "time_dyntime_only.sm"

/******************************************************************************
CLASS: (DynamicsSimObject)
PURPOSE:
 (This object manages the key dynamic elements of the sim, it is a
  slimmed-down version of dynamics.sm because there is no gravity in this sim.)
******************************************************************************/

// Include headers for classes this object contains:
##include "dynamics/dyn_manager/include/dyn_manager.hh"
##include "dynamics/dyn_manager/include/dyn_manager_init.hh"
##include "environment/planet/include/base_planet.hh"


class DynamicsSimObject: public Trick::SimObject
{
protected:
    // Reference to the external time manager.
    jeod::TimeManager & time_manager;

public:
    jeod::DynManager dyn_manager;
    jeod::DynManagerInit dyn_manager_init;
    jeod::BasePlanet reference_planet;

    // Constructor
    DynamicsSimObject(jeod::TimeManager & time_manager_in)
        : time_manager(time_manager_in)
    {
        P_MNGR("initialization") dyn_manager.initialize_model(dyn_manager_init, time_manager);
        P_MNGR_INIT_SIM("initialization") dyn_manager.initialize_simulation();

        P_ENV("initialization") reference_planet.register_planet(dyn_manager);

        // Derivative class jobs
        ("derivative") dyn_manager.compute_derivatives();

        // Integration jobs
        ("integration", &dyn_manager.sim_integrator)
            trick_ret = dyn_manager.integrate(exec_get_sim_time(), time_manager);
    }

    // Unimplemented copy constructor and assignment operator
    DynamicsSimObject(const DynamicsSimObject &) = delete;
    DynamicsSimObject & operator=(const DynamicsSimObject &) = delete;
};

DynamicsSimObject dynamics(jeod_time.time_manager);

/*****************************************************************************
VehSimObject
Purpose:(Models the vehicles)
*****************************************************************************/
#include "Base/vehicle_baseline.sm"
##include "utils/lvlh_frame/include/lvlh_frame.hh"
class VehSimObject: public VehicleBasicSimObject
{
public:
    jeod::LvlhFrame lvlh_frame;

    // Constructor
    VehSimObject(jeod::DynManager & dyn_mngr_in)
        : VehicleBasicSimObject(dyn_mngr_in)
    {
        P_DYN("initialization") lvlh_frame.initialize(dyn_manager);
        ("initialization") lvlh_frame.update();

        // Environment class jobs
        (DYNAMICS, "environment") lvlh_frame.update();
    }

    VehSimObject(const VehSimObject &) = delete;
    VehSimObject & operator=(const VehSimObject &) = delete;
};

VehSimObject vehA(dynamics.dyn_manager);
VehSimObject vehB(dynamics.dyn_manager);

/***************************************************************
 CLASS: (RelstateSimObject)
 PURPOSE:
  (This object handles the relative states.)
**************************************************************/

// Include headers for classes that this class contains:
##include "dynamics/derived_state/include/relative_derived_state.hh"
##include "dynamics/derived_state/include/lvlh_relative_derived_state.hh"

class RelstateSimObject: public Trick::SimObject
{
protected:
    // External references
    jeod::DynManager & dyn_manager;
    jeod::DynBody & vehA_body;
    jeod::DynBody & vehB_body;

public:
    jeod::RelativeDerivedState vehB_wrt_vehA_in_A;
    jeod::RelativeDerivedState vehA_wrt_vehB_in_B;

    jeod::LvlhRelativeDerivedState vehB_in_vehA_rectilvlh;
    jeod::LvlhRelativeDerivedState vehA_in_vehB_rectilvlh;

    jeod::LvlhRelativeDerivedState vehB_in_vehA_curvilvlh;
    jeod::LvlhRelativeDerivedState vehA_in_vehB_curvilvlh;
    // This is a dummy LVLH RDS whose only purpose is to check
    // conversion from curvilinear back to rectilinear LVLH
    jeod::LvlhRelativeDerivedState test_c2r;

    // Constructor
    RelstateSimObject(jeod::DynManager & dyn_mngr_in, jeod::DynBody & vehA_body_in, jeod::DynBody & vehB_body_in)
        : dyn_manager(dyn_mngr_in),
          vehA_body(vehA_body_in),
          vehB_body(vehB_body_in)
    {
        // Initialization jobs
        P_DYN("initialization") vehA_wrt_vehB_in_B.initialize(vehA_body, dyn_manager);
        P_DYN("initialization") vehB_wrt_vehA_in_A.initialize(vehB_body, dyn_manager);
        P_DYN("initialization") vehB_in_vehA_rectilvlh.initialize(vehB_body, dyn_manager);
        P_DYN("initialization") vehA_in_vehB_rectilvlh.initialize(vehA_body, dyn_manager);
        P_DYN("initialization") vehB_in_vehA_curvilvlh.initialize(vehB_body, dyn_manager);
        P_DYN("initialization") vehA_in_vehB_curvilvlh.initialize(vehA_body, dyn_manager);
        P_DYN("initialization") test_c2r.initialize(vehB_body, dyn_manager);

        // Environment class jobs
        (DYNAMICS, "environment") vehA_wrt_vehB_in_B.update();
        (DYNAMICS, "environment") vehB_wrt_vehA_in_A.update();

        (DYNAMICS, "environment") vehB_in_vehA_rectilvlh.update();
        (DYNAMICS, "environment") vehA_in_vehB_rectilvlh.update();

        (DYNAMICS, "environment") vehB_in_vehA_curvilvlh.update();
        (DYNAMICS, "environment") vehA_in_vehB_curvilvlh.update();
        (DYNAMICS, "environment") test_c2r.convert_circ_to_rect(vehB_in_vehA_curvilvlh.rel_state);
    }

    RelstateSimObject(const RelstateSimObject &) = delete;
    RelstateSimObject & operator=(const RelstateSimObject &) = delete;
};

RelstateSimObject rel_state(dynamics.dyn_manager, vehA.dyn_body, vehB.dyn_body);

IntegLoop sim_integ_loop(DYNAMICS) dynamics;
