//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
/*========================== TRICK HEADER ======================================
PURPOSE:
This is a demonstration sim for the Relative Derived State model.

The following simulation objects are defined in this sim:

         sys - Trick runtime executive and data recording routines
    jeod_sys - JEOD system object
   jeod_time - JEOD time object
    dynamics - The dynamics manager
        vehA - One vehicle
        vehB - Another vehicle
   rel_state - state between vehicles.
==============================================================================*/

// Define job calling intervals
#define DYNAMICS 1.00 // Moon/orbital dynamics interval

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#include "time_dyntime_only.sm"

#include "Base/vehicle_baseline.sm"
#include "dynamics.sm"
VehicleBasicSimObject vehA(dynamics.dyn_manager);
VehicleBasicSimObject vehB(dynamics.dyn_manager);

/***********************************************************************
CLASS: (Rel_stateSimObject)
PURPOSE:
 ( This sim object provides the relative state between the two vehicles
***********************************************************************/
##include "dynamics/derived_state/include/relative_derived_state.hh"

class Rel_stateSimObject: public Trick::SimObject
{
protected:
    // External references
    jeod::DynManager & dyn_manager;
    jeod::DynBody & vehA_body;
    jeod::DynBody & vehB_body;

public:
    jeod::RelativeDerivedState vehA_wrt_vehB_in_B;
    jeod::RelativeDerivedState vehB_wrt_vehA_in_A;
    jeod::RelativeDerivedState vehA_wrt_vehB_in_B_generalized;

    // Constructor
    Rel_stateSimObject(jeod::DynManager & dyn_mngr_in, jeod::DynBody & vehA_body_in, jeod::DynBody & vehB_body_in)
        : dyn_manager(dyn_mngr_in),
          vehA_body(vehA_body_in),
          vehB_body(vehB_body_in)
    {
        P_DYN("initialization") vehA_wrt_vehB_in_B.initialize(vehA_body, dyn_manager);
        P_DYN("initialization") vehB_wrt_vehA_in_A.initialize(vehA_body, dyn_manager);
        P_DYN("initialization") vehA_wrt_vehB_in_B_generalized.initialize(dyn_manager);

        (DYNAMICS, "environment") vehA_wrt_vehB_in_B.update();
        (DYNAMICS, "environment") vehB_wrt_vehA_in_A.update();
        (DYNAMICS, "environment") vehA_wrt_vehB_in_B_generalized.update();
    }

    Rel_stateSimObject(const Rel_stateSimObject &) = delete;
    Rel_stateSimObject & operator=(const Rel_stateSimObject &) = delete;
};

Rel_stateSimObject rel_state(dynamics.dyn_manager, vehA.dyn_body, vehB.dyn_body);

IntegLoop sim_integ_loop(DYNAMICS) dynamics;
