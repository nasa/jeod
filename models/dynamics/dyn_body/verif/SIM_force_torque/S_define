//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//===========================TRICK HEADER=====================
// PURPOSE:
/*******************************************************************************

Purpose:
  (This S_define file tests that the dynamic body model
    - Properly accumulates and propagates forces and torques,
      including the non-propagation of the non-transmitted forces and torques.
    - Properly integrates the equations of motion given the net forces and
      torques that act on a body.

   The following simulation objects are defined in this sim:
   - sys
     Trick runtime executive and data recording routines
   - time
     Time representations
   - body1
     An orbiting vehicle.
   - body2
     Another orbiting vehicle, possibly attached.
   - dynamics
     Dynamic elements.)
*******************************************************************************/

// Define job calling intervals
#define DYNAMICS 0.01 // High rate needed for rotation phase
#define LOGGING 1.0

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#include "time_dyntime_only.sm"

#include "Base/dynamics.sm"

class DynamicsTestSimObject : public DynamicsSimObject
{
public:
    DynamicsTestSimObject(jeod::TimeManager & time_manager_in)
        : DynamicsSimObject(time_manager_in)
    {
        // Compute derivatives as a scheduled job to make log file current
        (LOGGING, "environment") dyn_manager.compute_derivatives();
    }

    DynamicsTestSimObject(const DynamicsTestSimObject &) = delete;
    DynamicsTestSimObject & operator=(const DynamicsTestSimObject &) = delete;
};

DynamicsTestSimObject dynamics(jeod_time.time_manager);

/***************************************************************
CLASS: (Body1SimObject)
PURPOSE: ( This sim object models a simple vehicle.)
***************************************************************/
#include "Base/vehicle_baseline.sm"

// Include headers for classes that this class contains:
##include "dynamics/dyn_body/include/force.hh"
##include "dynamics/dyn_body/include/torque.hh"

class Body1SimObject: public VehicleBasicSimObject
{
public:
    jeod::Force no_xmit_forc1;
    jeod::Torque no_xmit_torq1;

    // Constructor
    Body1SimObject(jeod::DynManager & dyn_mngr_in)
        : VehicleBasicSimObject(dyn_mngr_in)
    {
        // Scheduled jobs
        (DYNAMICS, "scheduled") dyn_body.mass.update_mass_properties();
    }

    Body1SimObject(const Body1SimObject &) = delete;
    Body1SimObject & operator=(const Body1SimObject &) = delete;
};

Body1SimObject body1(dynamics.dyn_manager);

/***************************************************************
CLASS: (Body2SimObject)
PURPOSE: ( Collect forces and torques on body
***************************************************************/
##include "dynamics/body_action/include/body_attach_aligned.hh"
##include "dynamics/body_action/include/body_detach.hh"

class Body2SimObject: public VehicleBasicSimObject
{
public:
    jeod::BodyAttachAligned attach;
    jeod::BodyDetach detach;
    jeod::Force effector_forc1;
    jeod::Force environ_forc1;
    jeod::Force environ_forc2;
    jeod::Force no_xmit_forc1;
    jeod::Force no_xmit_forc2;
    double no_xmit_forc3[3];
    jeod::Torque effector_torq1;
    jeod::Torque environ_torq1;
    jeod::Torque environ_torq2;
    jeod::Torque no_xmit_torq1;
    jeod::Torque no_xmit_torq2;
    double no_xmit_torq3[3];

    // Constructor
    Body2SimObject(jeod::DynManager & dyn_mngr_in)
        : VehicleBasicSimObject(dyn_mngr_in)
    {
        // Scheduled jobs
        (DYNAMICS, "scheduled") dyn_body.mass.update_mass_properties();
        (DYNAMICS, "scheduled") dyn_body.compute_vehicle_point_derivatives(dyn_body.composite_body, dyn_body.derivs);
    }

    Body2SimObject(const Body2SimObject &) = delete;
    Body2SimObject & operator=(const Body2SimObject &) = delete;
};

Body2SimObject body2(dynamics.dyn_manager);

/*****************************************************************************
collect mechanism
Purpose: Collect forces and torques onto the bodies.
*****************************************************************************/
vcollect body1.dyn_body.collect.collect_no_xmit_forc jeod::CollectForce::create{body1.no_xmit_forc1};
vcollect body1.dyn_body.collect.collect_no_xmit_torq jeod::CollectTorque::create{body1.no_xmit_torq1};
vcollect body2.dyn_body.collect.collect_effector_forc jeod::CollectForce::create{body2.effector_forc1};
vcollect body2.dyn_body.collect.collect_effector_torq jeod::CollectTorque::create{body2.effector_torq1};
vcollect body2.dyn_body.collect.collect_environ_forc jeod::CollectForce::create{body2.environ_forc1,
                                                                                body2.environ_forc2};
vcollect body2.dyn_body.collect.collect_environ_torq jeod::CollectTorque::create{body2.environ_torq1,
                                                                                 body2.environ_torq2};
vcollect body2.dyn_body.collect.collect_no_xmit_forc jeod::CollectForce::create{body2.no_xmit_forc1,
                                                                                body2.no_xmit_forc2,
                                                                                body2.no_xmit_forc3};
vcollect body2.dyn_body.collect.collect_no_xmit_torq jeod::CollectTorque::create{body2.no_xmit_torq1,
                                                                                 body2.no_xmit_torq2,
                                                                                 body2.no_xmit_torq3};

IntegLoop sim_integ_loop(DYNAMICS) dynamics;
