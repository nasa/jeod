//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
// This simulation is a verification for the RNPJ2000 model
#define LOW_RATE_ENV 1.0 // Moon/orbital dynamics interval
#define DYNAMICS 0.01

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#include "time_TAI_UTC_UT1_TT_GMST.sm"

#include "dynamics_init_only.sm"
#include "environment_sans_de405.sm"

#include "Base/earth_GGM05C_baseline.sm"
##include "environment/RNP/RNPJ2000/verif/RNP_J2000_ver_source/include/RNP_J2000_log_trans.hh"

class EarthSimObject : public Earth_GGM05C_SimObject
{
public:
    jeod::J2000RNPLogging logging;
    double input_vector[3];  // (--) Used for transformation test
    double output_vector[3]; // (--) Used for transformation test

    EarthSimObject(jeod::DynManager & dyn_manager_in,
                   jeod::GravityManager & grav_in,
                   jeod::TimeTT & tt_in,
                   jeod::TimeUT1 & ut1_in,
                   jeod::TimeGMST & gmst_in)
        : Earth_GGM05C_SimObject(dyn_manager_in, grav_in, tt_in, ut1_in, gmst_in)
    {
        P_ENV("initialization") logging.copy_rotation_transposes(rnp.PJ2000, rnp.NJ2000, rnp.RJ2000, rnp.PMJ2000);

        P_ENV("initialization") matrix_multiply(planet.pfix.state.rot.T_parent_this, input_vector, output_vector);

        (DYNAMICS, "environment") logging.copy_rotation_transposes(rnp.PJ2000, rnp.NJ2000, rnp.RJ2000, rnp.PMJ2000);
    }

    EarthSimObject(const EarthSimObject &) = delete;
    EarthSimObject & operator=(const EarthSimObject &) = delete;
};

EarthSimObject earth(
    dynamics.dyn_manager, env.gravity_manager, jeod_time.time_tt, jeod_time.time_ut1, jeod_time.time_gmst);

IntegLoop sim_integ_loop(DYNAMICS) dynamics, earth;
