//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
/* ========================================================================= -
 -  This simulation is verification simulation for the earth atmosphere      -
 -                                                                           -
 -           sys - Trick runtime executive and data recording routines.
 -     jeod_time - The time object that creates UTC time
 -        planet - An earth-like planet including a METAtmosphere object
 -       vehicle - Test vehicle including recommended implementation of
 -                  AtmosphereState and METAtmosphereState
 - ========================================================================= */

#define DYNAMICS 1.0

#define P_TIME P10

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#define TIME_MODEL_UTC
#include "jeod_time.sm"

/*****************************************************************************
EarthSimObject
Purpose: provide the METAtmosphere without the overhead of a planetary body
         that would come in with one of the standard S-modules.
*****************************************************************************/
##include "environment/atmosphere/MET/include/MET_atmosphere.hh"
##include "environment/atmosphere/base_atmos/include/wind_velocity.hh"

##include "environment/atmosphere/MET/data/include/solar_mean.hh"
##include "environment/atmosphere/MET/data/include/met_data_wind_velocity.hh"

class EarthSimObject : public Trick::SimObject
{
public:
    jeod::WindVelocity wind_velocity;
    jeod::METAtmosphere atmos;

    // The default data objects
    jeod::METAtmosphere_solar_mean_default_data solar_mean_data;
    jeod::WindVelocity_wind_velocity_default_data wind_data;

    EarthSimObject(const jeod::TimeUTC & utc)
        : atmos(utc.trunc_julian_time),
          time_utc(utc)
    {
        ("default_data") solar_mean_data.initialize(&atmos);
        ("default_data") wind_data.initialize(&wind_velocity);
    }

    EarthSimObject operator=(const EarthSimObject &) = delete;
    EarthSimObject(const EarthSimObject &) = delete;

private:
    const jeod::TimeUTC & time_utc;
};

EarthSimObject planet(jeod_time.time_utc);

/*****************************************************************************
VehicleSimObject
Purpose:(Representative of what would be needed in a typical vehicle
         sim-object to add the atmosphere-state to a typical sim.
         This includes the preferred implementation and the deprecated (legacy)
         implementation for both AtmosphereState and METAtmosphereState)
*****************************************************************************/
##include "utils/planet_fixed/planet_fixed_posn/include/planet_fixed_posn.hh"
##include "environment/atmosphere/base_atmos/include/atmosphere_state.hh"
##include "environment/atmosphere/MET/include/MET_atmosphere_state.hh"

class VehicleSimObject : public Trick::SimObject
{
private:
    // external references:
    jeod::METAtmosphere & atmos_deprecate;

public:
    jeod::PlanetFixedPosition pos;
    jeod::AtmosphereState atmos_state;
    jeod::AtmosphereState atmos_state_deprecate;
    jeod::METAtmosphereState met_atmos_state;
    jeod::METAtmosphereState met_atmos_state_deprecate;

    // Constructor
    VehicleSimObject(jeod::METAtmosphere & atmos_model_)
        : atmos_deprecate(atmos_model_),
          pos(),
          atmos_state(atmos_model_, pos),
          atmos_state_deprecate(),
          met_atmos_state(atmos_model_, pos),
          met_atmos_state_deprecate()
    {
        ("initialization") atmos_state.update_state();
        ("initialization") atmos_state_deprecate.update_state(&atmos_deprecate, &pos);
        ("initialization") met_atmos_state.update_state();
        ("initialization") met_atmos_state_deprecate.update_state(&atmos_deprecate, &pos);
        (DYNAMICS, "environment") atmos_state.update_state();
        (DYNAMICS, "environment") atmos_state_deprecate.update_state(&atmos_deprecate, &pos);
        (DYNAMICS, "environment") met_atmos_state.update_state();
        (DYNAMICS, "environment") met_atmos_state_deprecate.update_state(&atmos_deprecate, &pos);
    }

    VehicleSimObject & operator=(const VehicleSimObject &) = delete;
    VehicleSimObject(const VehicleSimObject &) = delete;
};

VehicleSimObject vehicle(planet.atmos);
