//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//===========================TRICK HEADER=====================
/*****************************************************************************
 *         Date: July 2006                                                   *
 *---------------------------------------------------------------------------*
 ****************************************************************************/

#define DYNAMICS 0.1

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

//***************************************************************
// CLASS: (MngrSimObject)
// PURPOSE:
//  ( This sim object manages the key dynamic elements of the simulation.)
//***************************************************************

##include "dynamics/dyn_manager/include/dyn_manager.hh"
##include "dynamics/dyn_manager/include/dyn_manager_init.hh"
##include "dynamics/body_action/include/body_action.hh"
##include "environment/planet/include/planet.hh"
##include "environment/gravity/include/spherical_harmonics_gravity_source.hh"
##include "environment/earth_lighting/verif/include/lighting_ephem.hh"

class MngrSimObject : public Trick::SimObject
{
public:
    jeod::DynManager dyn_manager;
    jeod::DynManagerInit dyn_manager_init;

    jeod::Planet sun;
    jeod::Planet earth;
    jeod::Planet moon;
    jeod::SphericalHarmonicsGravitySource earth_grav;
    jeod::SphericalHarmonicsGravitySource sun_grav;
    jeod::SphericalHarmonicsGravitySource moon_grav;
    jeod::LightingEphem ephem;

    MngrSimObject()
    {
        P_ENV("initialization") ephem.ephem_initialize(dyn_manager);
        P_ENV("initialization") sun.register_model(sun_grav, dyn_manager);
        P_ENV("initialization") earth.register_model(earth_grav, dyn_manager);
        P_ENV("initialization") moon.register_model(moon_grav, dyn_manager);

        P_ENV("initialization") connect_planets(earth, moon, sun);
    }

    MngrSimObject(const MngrSimObject &) = delete;
    MngrSimObject & operator=(const MngrSimObject &) = delete;
};

MngrSimObject mngr;

/*****************************************************************************
LightSimObject
Purpose:(Earth-lighting sim object)
*****************************************************************************/
##include "environment/earth_lighting/include/earth_lighting.hh"
##include "environment/earth_lighting/verif/include/lighting_sim_verif.hh"

class LightSimObject : public Trick::SimObject
{
protected:
    MngrSimObject & mngr;

public:
    jeod::EarthLighting lighting;

    /* Define the circle_intersect input parameters*/
    double r_bottom;  /* (m) radius of the circle underneath*/
    double r_top;     /* (m) radius of the circle that is on top*/
    double d_centers; /* (m) distance between the circle centers*/
    double area;      /* (m2) Output area of intersection*/

    double position[3]; /* (m) spacecraft position */

    LightSimObject(MngrSimObject & ext_mngr)
        : mngr(ext_mngr)
    {
        P_ENV("initialization") lighting.initialize(mngr.dyn_manager);

        (DYNAMICS, "scheduled") lighting.calc_lighting(position);
    }

    LightSimObject(const LightSimObject &) = delete;
    LightSimObject & operator=(const LightSimObject &) = delete;
};

LightSimObject light(mngr);
