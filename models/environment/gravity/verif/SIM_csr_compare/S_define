//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
// This sim is used to verify the JEOD gravity model

// Define job calling intervals
#define DYNAMICS 1.0

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#include "time_dyntime_only.sm"

#include "dynamics.sm"
#include "environment_sans_de405.sm"

/****************************************************************
CLASS: EarthSimObject
****************************************************************/
#include "Base/planet_generic.sm"
##include "environment/planet/data/include/earth.hh"
##include "environment/gravity/data/include/earth_GGM05C.hh"

class EarthSimObject: public PlanetGenericSimObject
{
public:
    jeod::Planet_earth_default_data earth_default_data;
    jeod::SphericalHarmonicsGravitySource_earth_GGM05C_default_data grav_default_data;

    EarthSimObject(jeod::DynManager & dyn_manager_in, jeod::GravityManager & grav_in)
        : PlanetGenericSimObject(dyn_manager_in, grav_in, earth_default_data, grav_default_data)
    {
        // Run gravitation again so that the grav accel values are computed from the
        // current psoition (which is set via trick.add_read)
        (DYNAMICS, "environment") dyn_manager.gravitation();
    }

    // Unimplemented copy constructor and assignment operator
    EarthSimObject(const EarthSimObject &) = delete;
    EarthSimObject & operator=(const EarthSimObject &) = delete;
};

EarthSimObject earth(dynamics.dyn_manager, env.gravity_manager);

/****************************************************************
CLASS: VehicleSimObject
****************************************************************/
#include "Base/vehicle_baseline.sm"
##include "dynamics/body_action/include/dyn_body_init_lvlh_rot_state.hh"

class VehicleSimObject: public VehicleBasicSimObject
{
public:
    jeod::DynBodyInitLvlhRotState lvlh_init;

    // Constructor
    VehicleSimObject(jeod::DynManager & dyn_mngr_in)
        : VehicleBasicSimObject(dyn_mngr_in)
    {
    }

    // Unimplemented copy constructor and assignment operator
    VehicleSimObject(const VehicleSimObject &) = delete;
    VehicleSimObject & operator=(const VehicleSimObject &) = delete;
};

VehicleSimObject vehicle(dynamics.dyn_manager);

IntegLoop sim_integ_loop(DYNAMICS) dynamics;
