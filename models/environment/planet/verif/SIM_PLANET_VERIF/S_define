//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//===========================TRICK HEADER=====================
// PURPOSE:
//==============================================================================
// This simulation is a demonstration Trick simulation for exercising the planet
// model in JEOD. The following simulation objects are defined in this sim:
//
//          sys - Trick runtime executive and data recording routines
//         time - Universal time
//         mngr - Dynamics manager
//        earth - Object used to the exercise Planet model
//
//==============================================================================

// Define job calling intervals
#define ENVIRONMENT 1.00 // Ephemeris update interval
#define DYNAMICS 1.00    // Dynamics update interval

// Define the phase initialization priorities
/* NOTE: Initialization jobs lacking an assigned initialization priority run
   after all initialization jobs that have assigned phase init priorities. */
#define P_TIME P10 // Highest priority; these jobs only depend on time
#define P_ENV P20  // Environment initializations
#define P_BODY P30 // Orbital body initializations

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

//***************************************************************
// CLASS: (Jeod_timeSimObject)
// PURPOSE:
//  ( This sim object relates simulation time to time on the Earth.)
//***************************************************************

// Include headers for classes that this class contains:
##include "environment/time/include/time_manager.hh"
##include "environment/time/include/time_manager_init.hh"

class Jeod_timeSimObject: public Trick::SimObject
{
public:
    jeod::TimeManager time_manager;
    jeod::TimeManagerInit time_manager_init;

    // Instances for matching to other sim objects:

    // Constructor
    Jeod_timeSimObject()
    {
        //
        // Initialization jobs
        //
        P_TIME("initialization") time_manager.initialize(&time_manager_init);
        //
        // Scheduled jobs
        //
        (DYNAMICS, "environment") time_manager.update(exec_get_sim_time());
    }

    Jeod_timeSimObject(const Jeod_timeSimObject &) = delete;
    Jeod_timeSimObject & operator=(const Jeod_timeSimObject &) = delete;
};

Jeod_timeSimObject jeod_time;

//***************************************************************
// CLASS: (MngrSimObject)
// PURPOSE:
//  ( This sim object manages the key dynamic elements of the simulation.)
//***************************************************************

// Include headers for classes that this class contains:
##include "dynamics/dyn_manager/include/dyn_manager.hh"
##include "dynamics/dyn_manager/include/dyn_manager_init.hh"


class MngrSimObject: public Trick::SimObject
{
public:
    jeod::DynManager dyn_manager;
    jeod::DynManagerInit dyn_manager_init;

    // Instances for matching to other sim objects:

    // Constructor
    MngrSimObject(jeod::TimeManager & time_manager_in)
        : time_manager(time_manager_in)
    {
        //
        //
        //
        // Initialization and restart jobs
        //
        P_ENV("initialization") dyn_manager.initialize_model(dyn_manager_init, time_manager);
        P_BODY("initialization") dyn_manager.initialize_simulation();
    }

    MngrSimObject(const MngrSimObject &) = delete;
    MngrSimObject & operator=(const MngrSimObject &) = delete;

private:
    jeod::TimeManager & time_manager;
};

MngrSimObject mngr(jeod_time.time_manager);

//***************************************************************
// CLASS: (EnvSimObject)
// PURPOSE:
//  ( This sim object models the space environment.)
//***************************************************************

// Include headers for classes that this class contains:
##include "environment/gravity/include/gravity_manager.hh"

class EnvSimObject : public Trick::SimObject
{
public:
    jeod::GravityManager gravity;

    // Instances for matching to other sim objects:
    MngrSimObject * internal_dynamics;

    // Constructor
    EnvSimObject(MngrSimObject & ext_dynamics)
    {
        internal_dynamics = &ext_dynamics;
        //
        // Initialization jobs
        //
        P_ENV("initialization") gravity.initialize_model(internal_dynamics->dyn_manager);
    }

    EnvSimObject(const EnvSimObject &) = delete;
    EnvSimObject & operator=(const EnvSimObject &) = delete;
};

EnvSimObject env(mngr);

//***************************************************************
// CLASS: (EarthSimObject)
// PURPOSE:
//  ( This sim object models the space environment.)
//***************************************************************

// Include headers for classes that this class contains:
##include "environment/planet/include/planet.hh"
##include "environment/gravity/include/spherical_harmonics_gravity_source.hh"

// Include default data classes:
##include "environment/planet/data/include/earth.hh"
##include "environment/gravity/data/include/earth_GGM05C.hh"

class EarthSimObject: public Trick::SimObject
{
public:
    jeod::Planet planet;
    jeod::SphericalHarmonicsGravitySource gravity_source;

    // Instances for matching to other sim objects:
    EnvSimObject * internal_env;
    MngrSimObject * internal_dynamics;

    // Instances for default data:
    jeod::Planet_earth_default_data planet_default_data;
    jeod::SphericalHarmonicsGravitySource_earth_GGM05C_default_data gravity_default_data;

    // Constructor
    EarthSimObject(EnvSimObject & ext_env, MngrSimObject & ext_dynamics)
    {
        internal_env = &ext_env;
        internal_dynamics = &ext_dynamics;
        //
        // Default data jobs
        //
        ("default_data") planet_default_data.initialize(&planet);
        ("default_data") gravity_default_data.initialize(&gravity_source);

        //
        //
        //
        // Initialization jobs
        //
        P_ENV("initialization") gravity_source.initialize_body();
        P_ENV("initialization") internal_env->gravity.add_grav_source(gravity_source);
        P_ENV("initialization") planet.register_model(gravity_source, internal_dynamics->dyn_manager);
        P_BODY("initialization") planet.initialize();
    }

    EarthSimObject(const EarthSimObject &) = delete;
    EarthSimObject & operator=(const EarthSimObject &) = delete;
};

EarthSimObject earth(env, mngr);
