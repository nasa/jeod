//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//***************************************************************
// CLASS: (SubscriptionsEnvSimObject)
// PURPOSE:
//  ( This sim object provides the top-level models for the space
//     environment.  This representation of the EnvSimObject
//     provides gravity, the DE405 ephemerides model, and frame
//     subscriptions required for the ref frame tree to build.)
//***************************************************************

class SubscriptionsEnvSimObject : public Trick::SimObject
{
private: // external references
    jeod::Planet & sun;
    jeod::Planet & earth;
    jeod::Planet & moon;
    jeod::Planet & mars;

public:
    // Constructor
    SubscriptionsEnvSimObject(jeod::Planet & sun_in,
                              jeod::Planet & earth_in,
                              jeod::Planet & moon_in,
                              jeod::Planet & mars_in)
        : sun(sun_in),
          earth(earth_in),
          moon(moon_in),
          mars(mars_in)
    {
        P_EPH("initialization") sun.inertial.subscribe();
        P_EPH("initialization") earth.inertial.subscribe();
        P_EPH("initialization") moon.inertial.subscribe();
        P_EPH("initialization") mars.inertial.subscribe();

        P_EPH("initialization") earth.pfix.subscribe();
        P_EPH("initialization") moon.pfix.subscribe();
    }

    // Unimplemented copy constructor and assignment operator
    SubscriptionsEnvSimObject(const SubscriptionsEnvSimObject &) = delete;
    SubscriptionsEnvSimObject & operator=(const SubscriptionsEnvSimObject &) = delete;
};

SubscriptionsEnvSimObject env_subscribe(sun.planet, earth.planet, moon.planet, mars.planet);
