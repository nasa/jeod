//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//===========================TRICK HEADER=====================
// PURPOSE:
//==============================================================================
// This simulation is a demonstration simulation for the JEOD2.0 implementation
// of the time module.  This simulation incoporates several of the most commonly
// used time-types.  The Runs demonstrate changing the direction in which time
// evolves, testing the appropriate addition of leap-seconds mid-sim, and
// testing the compatibility with JEOD1.x.
//
// The following simulation objects are defined in this sim:
//
//          sys - Trick runtime executive and data recording routines
//         time - Universal time
//
//
//==============================================================================

// Define job calling intervals
#define DYNAMICS 0.1 // Moon/orbital dynamics interval

// Define the phase initialization priorities.
// NOTE: Initialization jobs lacking an assigned phase initialization priority
// run after all initialization jobs that have assigned phase init priorities.
#define P_TIME P10 // Highest priority; these jobs only depend on time

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"


//***************************************************************
// CLASS: (Jeod_timeSimObject)
// PURPOSE:
//  ( This sim object relates simulation time to time on the Earth.)
//***************************************************************

// Include headers for classes that this class contains:
##include "environment/time/include/time_manager.hh"
##include "environment/time/include/time_manager_init.hh"
##include "environment/time/include/time_tai.hh"
##include "environment/time/include/time_utc.hh"
##include "environment/time/include/time_ut1.hh"
##include "environment/time/include/time_converter_dyn_tai.hh"
##include "environment/time/include/time_converter_tai_utc.hh"
##include "environment/time/include/time_converter_tai_ut1.hh"

// Include default data classes:
##include "environment/time/data/include/tai_to_utc.hh"
##include "environment/time/data/include/tai_to_ut1.hh"

class Jeod_timeSimObject: public Trick::SimObject
{
public:
    jeod::TimeManager time_manager;
    jeod::TimeManagerInit time_manager_init;
    jeod::TimeTAI time_tai;
    jeod::TimeUTC time_utc;
    jeod::TimeUT1 time_ut1;
    jeod::TimeConverter_Dyn_TAI time_converter_dyn_tai;
    jeod::TimeConverter_TAI_UTC time_converter_tai_utc;
    jeod::TimeConverter_TAI_UT1 time_converter_tai_ut1;

    // Instances for matching to other sim objects:

    // Instances for default data:
    jeod::TimeConverter_TAI_UTC_tai_to_utc_default_data time_converter_tai_utc_default_data;
    jeod::TimeConverter_TAI_UT1_tai_to_ut1_default_data time_converter_tai_ut1_default_data;

    // Constructor
    Jeod_timeSimObject()
    {
        //
        // Default data jobs
        //
        ("default_data") time_converter_tai_utc_default_data.initialize(&time_converter_tai_utc);
        ("default_data") time_converter_tai_ut1_default_data.initialize(&time_converter_tai_ut1);

        //
        //
        //
        // Initialization jobs
        //
        P_TIME("initialization") time_manager.register_time(time_tai);
        P_TIME("initialization") time_manager.register_converter(time_converter_dyn_tai);
        P_TIME("initialization") time_manager.register_time(time_utc);
        P_TIME("initialization") time_manager.register_converter(time_converter_tai_utc);
        P_TIME("initialization") time_manager.register_time(time_ut1);
        P_TIME("initialization") time_manager.register_converter(time_converter_tai_ut1);
        P_TIME("initialization") time_manager.initialize(&time_manager_init);
        //
        // Scheduled jobs
        //
        // Note - this call is not necessary.  If it is not made, the following
        // call to calendar_update will make it automatically.
        (DYNAMICS, "environment") time_manager.update(exec_get_sim_time());
        (DYNAMICS, "environment") time_tai.calendar_update(exec_get_sim_time());
        (DYNAMICS, "environment") time_ut1.calendar_update(exec_get_sim_time());
        (DYNAMICS, "environment") time_utc.calendar_update(exec_get_sim_time());
    }

    Jeod_timeSimObject(const Jeod_timeSimObject &) = delete;
    Jeod_timeSimObject & operator=(const Jeod_timeSimObject &) = delete;
};

Jeod_timeSimObject jeod_time;
