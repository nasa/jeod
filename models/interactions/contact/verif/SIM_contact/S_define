//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//===========================TRICK HEADER=====================
// PURPOSE:
//=============================================================================
// This simulation is a demonstration simulation for the
// contact mechanisms between 2 dynamic bodies.
//
//              sys - Trick runtime executive and data recording routines
//             time - Universal time
//             veh1 - free-floating vehicle
//             veh2 - free-floating vehicle
//         dynamics - Orbital dynamics
//
//=============================================================================

// Define job calling intervals
#define LOW_RATE_ENV 600.00 // Low-rate environment update interval
#define DYNAMICS 0.01       // Vehicle and plantary dynamics interval (50Hz)

// Define the phase initialization priorities.
// NOTE: Initialization jobs lacking an assigned phase initialization priority
// run after all initialization jobs that have assigned phase init priorities.
#define P_TIME P10 // Highest priority; these jobs only depend on time
#define P_MNGR P20 // Dynamics manager initializations
#define P_ENV P30  // Environment initializations
#define P_BODY P40 // Orbital body initializations
#define P_DYN P50  // State-dependent initializations

// Global S_define name definitions.
#define DYN_MNGR_NAME dynamics.manager

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

//=============================================================================
// SIM_OBJECT: time
// This sim object relates simulation time to time on the Earth.
//=============================================================================
#include "Contact_S_modules/time.sm"

//=============================================================================
// SIM_OBJECT: dynamics
// This sim object manages the key dynamic elements of the simulation.
//=============================================================================
#include "Contact_S_modules/dynamics.sm"

/* ========================================================================= -
 - SIM_OBJECT: contact                                                       -
 - ========================================================================= */
#include "Contact_S_modules/contact.sm"

/* ========================================================================= -
 - SIM_OBJECTS: veh1_dyn and veh2_dyn                                        -
 - ========================================================================= */
#include "Contact_S_modules/sv_dyn.sm"

//=============================================================================
// SIM_OBJECT: veh1_dyn
//=============================================================================
// Define the vehicle instance name.
SvDynSimObject veh1_dyn(contact, dynamics);

//=============================================================================
// SIM_OBJECT: veh2_dyn
//=============================================================================
// Define the vehicle instance name.
SvDynSimObject veh2_dyn(contact, dynamics);

#include "Contact_S_modules/sv_collect_veh.sm"

IntegLoop sim_integ_loop(DYNAMICS) dynamics, contact, veh1_dyn, veh2_dyn;
