//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//



//=============================================================================
// SIM_OBJECT: planet
// This sim object models a planet.
//=============================================================================
##include "environment/planet/include/planet.hh"
##include "environment/gravity/include/spherical_harmonics_gravity_source.hh"
##include "environment/planet/data/include/earth.hh"
##include "environment/gravity/data/include/earth_GGM05C.hh"
##include "interactions/contact/verif/SIM_ground_contact/models/terrain/include/terrain_radius.hh"
##include "interactions/contact/verif/SIM_ground_contact/models/contact_ground/include/ground_facet.hh"

class PlanetSimObject : public Trick::SimObject
{
public:
    //
    // Data structures
    //
    jeod::Planet planet;
    jeod::SphericalHarmonicsGravitySource gravity_source;
    jeod::TerrainRadius terrain;
    jeod::GroundFacet * ground;

    // These variables are used as externally dependant arguments to the
    // jobs called by the Trick executive.  They either need to be connected
    // in an initialization constructor or a connection job.  In this case,
    // we use an initialization constructor.
    jeod::GravityManager * env_gravity;
    jeod::DynManager * dyn_manager;

    jeod::Planet_earth_default_data earth_planet_init;
    jeod::SphericalHarmonicsGravitySource_earth_GGM05C_default_data earth_gravity_init;

    PlanetSimObject(jeod::GravityManager & env_grav, jeod::DynManager & dyn_mngr)
    {
        // Connect the externally dependent calling parameters.
        env_gravity = &env_grav;
        dyn_manager = &dyn_mngr;

        //
        // Default data jobs
        //

        // We now call default data class jobs to load in default data.
        // For now, these are simple functions.  These should really be
        // part of the classes/objects they are initializing.  We're still
        // working on that.
        ("default_data") earth_planet_init.initialize(&planet);
        ("default_data") earth_gravity_init.initialize(&gravity_source);

        //
        // Initialization jobs
        //
        P_ENV("initialization") gravity_source.initialize_body();
        P_ENV("initialization") env_gravity->add_grav_source(gravity_source);
        P_ENV("initialization") planet.register_model(gravity_source, *dyn_manager);

        P_BODY("initialization") planet.initialize();
        P_BODY("initialization") terrain.initialize(&planet);
    }

    // This object is not copyable
    PlanetSimObject & operator=(const PlanetSimObject &) = delete;
};

PlanetSimObject planet(env.gravity_manager, dynamics.dyn_manager);
