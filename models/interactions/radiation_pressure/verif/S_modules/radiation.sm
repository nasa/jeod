//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//***************************************************************
// CLASS: (RadiationSimObject)
// PURPOSE:
//  ( This sim object handles the radiation-field interaction.)
//***************************************************************


// Include headers for classes that this class contains:
##include "interactions/radiation_pressure/include/radiation_pressure.hh"
##include "interactions/radiation_pressure/include/radiation_surface_factory.hh"
##include "interactions/radiation_pressure/include/radiation_surface.hh"
##include "utils/surface_model/include/surface_model.hh"
##include "interactions/radiation_pressure/verif/include/radiation_data_recorder.hh"
//Include headers for classes instantiated in Modified Data
##include "interactions/radiation_pressure/include/radiation_third_body.hh"
##include "utils/surface_model/include/flat_plate_thermal.hh"
##include "interactions/radiation_pressure/include/radiation_params.hh"

class RadiationSimObject: public Trick::SimObject
{
public:
    jeod::RadiationPressure rad_pressure;
    jeod::RadiationSurfaceFactory surface_factory;
    jeod::RadiationSurface rad_surface;
    jeod::SurfaceModel surface;
    jeod::RadiationDataRecorder data_rec;

    // Constructor
    RadiationSimObject(jeod::DynManager & dyn_mngr_in, jeod::DynBody & veh_in, jeod::TimeDyn & dyn_time_in)
        : dyn_mngr(dyn_mngr_in),
          veh(veh_in),
          dyn_time(dyn_time_in)
    {
        //
        // Initialization jobs
        //
        P_ENV("initialization") surface_factory.create_surface(&surface, &rad_surface);
        P_ENV("initialization") rad_pressure.initialize(dyn_mngr, &rad_surface, veh.mass.composite_properties.position);
        //
        // Scheduled jobs
        //
        (DYNAMICS, "scheduled") rad_pressure.update(veh.structure,
                                                    veh.mass.composite_properties.position,
                                                    dyn_time.scale_factor,
                                                    dyn_time.seconds);
        (DYNAMICS, "scheduled") data_rec.record_data(&rad_surface);
    }

    RadiationSimObject(const RadiationSimObject &) = delete;
    RadiationSimObject & operator=(const RadiationSimObject &) = delete;

private:
    jeod::DynManager & dyn_mngr;
    jeod::DynBody & veh;
    jeod::TimeDyn & dyn_time;
};

RadiationSimObject radiation(dynamics.dyn_manager, vehicle.dyn_body, jeod_time.time_manager.dyn_time);
