//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//===========================TRICK HEADER=====================
// PURPOSE:
//==============================================================================
// This simulation is a demonstration simulation for the lunar environment
// and orbital dynamics models in Trick. The following simulation objects
// are defined in this sim:
//
//          sys - Trick runtime executive and data recording routines
//         time - Simplified time model
//         test - Item under test
//
//==============================================================================

// Define job calling intervals
#define DYNAMICS 1.00 // Dynamics interval

// Define the phase initialization priorities.
// NOTE: Initialization jobs lacking an assigned phase initialization priority
// run after all initialization jobs that have assigned phase init priorities.
#define P_TIME P20 // Highest priority; these jobs only depend on time
#define P_TEST P30 // Test object initializations

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

#include "time_dyntime_only.sm"

//***************************************************************
// CLASS: (TestSimObject)
// PURPOSE:
//  ( Items under test and the state integrators.)
//***************************************************************

// Include headers for classes that this class contains:
##include "utils/integration/verif/include/integration_test_manager.hh"

##include "utils/integration/verif/include/translation_test.hh"
##include "utils/integration/verif/include/rotation_test.hh"
##include "utils/integration/gauss_jackson/include/gauss_jackson_integrator_constructor.hh"
##include "utils/integration/lsode/include/lsode_integrator_constructor.hh"

class TestSimObject: public Trick::SimObject
{
public:
    // Member functions

    // Constructor
    TestSimObject(jeod::TimeManager & time_manager_in)
        : time_manager(time_manager_in)
    {
        //
        // Initialization jobs
        //
        P_TEST("initialization") test_manager.initialize(time_manager, DYNAMICS);

        //
        // Environment class jobs
        //
        (DYNAMICS, "environment") test_manager.propagate(time_manager.dyn_time.seconds);

        //
        // Shutdown jobs
        //
        ("shutdown") test_manager.shutdown(exec_get_sim_time(), time_manager.dyn_time.seconds);

        //
        // Derivative class jobs
        //
        ("derivative") test_manager.compute_derivatives();

        //
        // Integration jobs
        //
        ("integration", &test_manager.sim_integrator)
            trick_ret = test_manager.integrate(test_manager.sim_integrator->time_0, time_manager);
    }

    // Member data

    jeod::IntegrationTestManager test_manager;

    jeod::RotationTestTorqueFreeSphere torque_free_sphere;
    jeod::RotationTestTorqueFreeSymTop torque_free_symtop;
    jeod::RotationTestTorqueFreeSymTopB torque_free_symtop_b;
    jeod::RotationTestSHOSphere sho_sphere;
    jeod::TranslationTestOrbit orbit;
    jeod::TranslationTestSpringDamper spring_damper;

    // NOTE Turner Jan 2019
    //      There are SWIG issues limiting visibility of the integration
    //      techniques in er7-utils, resulting in difficulties setting "technique"
    //      directly from the input file.
    //      Consequently, creating switch_integ_to_* methods to allow switching
    //      between integration techniques from the input file.
    //      These methods can be removed if the issue of visibility to
    //      er7-utils integration techniques is resolved.
    //      These are not needed for JEOD integrators like Gauss-Jackson and
    //      LSODE.
    void switch_integ_to_abm4()
    {
        test_manager.integ_option = er7_utils::Integration::AdamsBashforthMoulton4;
    }

    void switch_integ_to_beeman()
    {
        test_manager.integ_option = er7_utils::Integration::Beeman;
    }

    void switch_integ_to_euler()
    {
        test_manager.integ_option = er7_utils::Integration::Euler;
    }

    void switch_integ_to_rk2Heun()
    {
        test_manager.integ_option = er7_utils::Integration::RK2Heun;
    }

    void switch_integ_to_rk4()
    {
        test_manager.integ_option = er7_utils::Integration::RungeKutta4;
    }

    void switch_integ_to_symplecticEuler()
    {
        test_manager.integ_option = er7_utils::Integration::SymplecticEuler;
    }

    //  void switch_integ_to_RKF78()
    //  { technique = er7_utils::Integration::RKFehlberg78; }
    //  void switch_integ_to_Euler()
    //  { technique = er7_utils::Integration::Euler; }

    // Unimplemented copy constructor and assignment operator
    TestSimObject(const TestSimObject &) = delete;
    TestSimObject & operator=(const TestSimObject &) = delete;

private:
    // Reference to the external time manager.
    jeod::TimeManager & time_manager;
};

TestSimObject test(jeod_time.time_manager);

IntegLoop sim_integ_loop(DYNAMICS) test;
