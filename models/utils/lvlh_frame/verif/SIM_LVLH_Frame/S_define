//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//===========================TRICK HEADER=====================
// PURPOSE:
//==============================================================================
// This simulation is a demonstration Trick simulation for exercising the JEOD
// Local-Vertical, Local-Horizontal model. The following simulation objects are
// defined in this sim:
//
//     sys - Trick runtime executive and data recording routines
//   jeod_sys - JEOD system object
//  jeod_time - JEOD time object
//   dynamics - The dynamics manager
//   vehicle - A simple generic vehicle
//
//==============================================================================

// Define job calling intervals
#define DYNAMICS 1.00 // Environment update interval

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

#include "jeod_time.sm"

//***************************************************************
// CLASS: (DynamicsSimObject)
// PURPOSE:
// (This object manages the key dynamic elements of the sim.)
//***************************************************************

// Include headers for classes this object contains:
##include "dynamics/dyn_manager/include/dyn_manager.hh"
##include "dynamics/dyn_manager/include/dyn_manager_init.hh"
##include "dynamics/body_action/include/body_action.hh"


class DynamicsSimObject: public Trick::SimObject
{
protected:
    // Reference to the external time manager.
    jeod::TimeManager & time_manager;

public:
    jeod::DynManager manager;
    jeod::DynManagerInit manager_init;

    // Constructor
    DynamicsSimObject(jeod::TimeManager & time_manager_in)
        : time_manager(time_manager_in)
    {
        // Initialization jobs
        P_MNGR("initialization") manager.initialize_model(manager_init, time_manager);
        P_MNGR_INIT_SIM("initialization") manager.initialize_simulation();

        // Derivative class jobs
        ("derivative") manager.compute_derivatives();

        // Integration jobs
        ("integration", &manager.sim_integrator) trick_ret = manager.integrate(exec_get_sim_time(), time_manager);
    }

    DynamicsSimObject(const DynamicsSimObject &) = delete;
    DynamicsSimObject & operator=(const DynamicsSimObject &) = delete;
};

DynamicsSimObject dynamics(jeod_time.time_manager);

//***************************************************************
// CLASS: (VehicleSimObject)
// PURPOSE:
// (This object models a simple vehicle in space.)
//***************************************************************

// Include headers for classes this object contains:
##include "dynamics/dyn_body/include/dyn_body.hh"
##include "dynamics/body_action/include/dyn_body_init_trans_state.hh"
##include "dynamics/body_action/include/dyn_body_init_rot_state.hh"
##include "dynamics/body_action/include/mass_body_init.hh"
##include "utils/lvlh_frame/include/lvlh_frame.hh"
##include "utils/ref_frames/include/ref_frame_state.hh"
##include "environment/planet/include/base_planet.hh"

class VehicleSimObject: public Trick::SimObject
{
protected:
    // External references
    jeod::DynManager & dyn_manager;

public:
    jeod::DynBody body;
    jeod::DynBodyInitTransState trans_init;
    jeod::DynBodyInitRotState rot_init;
    jeod::MassBodyInit mass_init;
    jeod::LvlhFrame lvlh_frame;
    jeod::RefFrameState calcscheck_relstate;
    jeod::BasePlanet reference_planet;

    // Constructor
    VehicleSimObject(jeod::DynManager & dyn_mgr_in)
        : dyn_manager(dyn_mgr_in)
    {
        // Initialization jobs
        P_ENV("initialization") reference_planet.register_planet(dyn_manager);
        P_ENV("initialization") body.initialize_model(dyn_manager);
        P_DYN("initialization") lvlh_frame.initialize(dyn_manager);
        ("initialization") lvlh_frame.update();
        ("initialization") lvlh_frame.frame.compute_relative_state(reference_planet.inertial, calcscheck_relstate);

        // Environment class jobs
        (DYNAMICS, "environment") lvlh_frame.update();
        (DYNAMICS, "environment")
            lvlh_frame.frame.compute_relative_state(reference_planet.inertial, calcscheck_relstate);
    }

    VehicleSimObject(const VehicleSimObject &) = delete;
    VehicleSimObject & operator=(const VehicleSimObject &) = delete;
};

VehicleSimObject vehicle(dynamics.manager);

IntegLoop sim_integ_loop(DYNAMICS) dynamics;
