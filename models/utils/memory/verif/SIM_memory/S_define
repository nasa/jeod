//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
/*******************************************************************************
Purpose:
  (This simulation tests container model checkpoint and restart capabilities.)
*******************************************************************************/

##include <cstddef>
##include "utils/memory/include/jeod_alloc.hh"

% header {
struct Foo
{
    Foo()
        : ival(0),
          dval(0.0)
    {
    }

    void set(int val)
    {
        dval = ival = val;
    }

    int ival;    /* -- Integer value */
    double dval; /* -- Double value */
};

struct TestContainer
{
    TestContainer()
        : dbl_array(0),
          dbl_matrix(0),
          foo_object(0),
          foo_array(0)
    {
        JEOD_REGISTER_CLASS(TestContainer);
        JEOD_REGISTER_CLASS(Foo);
    }

    void initialize()
    {
        dbl_object = JEOD_ALLOC_PRIM_OBJECT(double, (42));

        dbl_array = JEOD_ALLOC_PRIM_ARRAY(2, double);
        dbl_array[0] = 0.0;
        dbl_array[1] = 1.0;

        dbl_matrix = JEOD_ALLOC_PRIM_ARRAY(2, double *);
        dbl_matrix[0] = JEOD_ALLOC_PRIM_ARRAY(1, double);
        dbl_matrix[1] = JEOD_ALLOC_PRIM_ARRAY(2, double);
        dbl_matrix[0][0] = 1.0;
        dbl_matrix[1][0] = -1.0;
        dbl_matrix[1][1] = 2.0;

        foo_object = JEOD_ALLOC_CLASS_OBJECT(Foo, ());
        foo_object->set(42);

        foo_array = JEOD_ALLOC_CLASS_ARRAY(2, Foo);
        foo_array[0].set(1);
        foo_array[1].set(2);

        foo_matrix = JEOD_ALLOC_CLASS_POINTER_ARRAY(2, Foo);
        foo_matrix[0] = JEOD_ALLOC_CLASS_ARRAY(1, Foo);
        foo_matrix[0][0].set(3);
        foo_matrix[1] = nullptr;
    }

    void shutdown()
    {
        JEOD_DELETE_ARRAY(foo_matrix[0]);
        JEOD_DELETE_ARRAY(foo_matrix);
        JEOD_DELETE_ARRAY(foo_array);
        JEOD_DELETE_OBJECT(foo_object);
        JEOD_DELETE_ARRAY(dbl_matrix[1]);
        JEOD_DELETE_ARRAY(dbl_matrix[0]);
        JEOD_DELETE_ARRAY(dbl_matrix);
        JEOD_DELETE_ARRAY(dbl_array);
        JEOD_DELETE_OBJECT(dbl_object);
    }

    double * dbl_object;  /* -- Single double */
    double * dbl_array;   /* -- Array of doubles */
    double ** dbl_matrix; /* -- Matrix of doubles */
    Foo * foo_object;     /* -- Single object */
    Foo * foo_array;      /* -- Array of objects */
    Foo ** foo_matrix;    /* -- Matrix of objects */
};
%}

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

/**
Test sim object.
This object tests that each of the publicly-defined STL replacements
can be checkpointed and restarted.
*/

class TestSimObject: public Trick::SimObject
{
public:
    // Constructor
    TestSimObject()
    {
        ("initialization") container.initialize();
        (1.0, "scheduled") do_nothing();
        ("shutdown") container.shutdown();
    }

    void do_nothing() {}

    TestContainer container; /* -- Test article */

    TestSimObject(const TestSimObject &) = delete;
    TestSimObject & operator=(const TestSimObject &) = delete;
};

TestSimObject test_sim_object;
