//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//===========================TRICK HEADER=====================
// PURPOSE:
//==============================================================================
// This simulation is a demonstration Trick simulation for exercising the JEOD
// North-East-Down model. The following simulation objects are defined in
// this sim:
//
//          sys - Trick runtime executive and data recording routines
//         time - Universal time
//        earth - Object used to exercise the North-East-Down model
//
//==============================================================================

// Define job calling intervals
#define ENVIRONMENT 1.00 // Environment update interval

// Define the phase initialization priorities
/* NOTE: Initialization jobs lacking an assigned initialization priority run
   after all initialization jobs that have assigned phase init priorities. */
#define P_ENV P20  // Environment initializations
#define P_BODY P30 // Orbital body initializations

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

//***************************************************************
// CLASS: (EarthSimObject)
// PURPOSE:
//  ( This sim object represents the earth)
//***************************************************************

// Include headers for classes that this class contains:
##include "environment/planet/data/include/earth.hh"
##include "environment/gravity/data/include/earth_GGM05C.hh"
##include "environment/planet/include/planet.hh"
##include "environment/gravity/include/spherical_harmonics_gravity_source.hh"
##include "utils/planet_fixed/planet_fixed_posn/include/alt_lat_long_state.hh"

##include "utils/planet_fixed/north_east_down/include/north_east_down.hh"


class EarthSimObject: public Trick::SimObject
{
public:
    jeod::SphericalHarmonicsGravitySource gravity_source;
    jeod::Planet planet;

    double cartesian_pos[3];
    double cartesian_vel[3];
    jeod::AltLatLongState spherical_pos;
    jeod::AltLatLongState elliptical_pos;

    jeod::NorthEastDown ned_frame;

    // Default data objects
    jeod::Planet_earth_default_data planet_default_data;
    jeod::SphericalHarmonicsGravitySource_earth_GGM05C_default_data gravity_default_data;

    // Constructor
    EarthSimObject()
    {
        ("default_data") planet_default_data.initialize(&planet);
        ("default_data") gravity_default_data.initialize(&gravity_source);

        //
        //
        //
        // Initialization jobs
        //
        P_ENV("initialization") gravity_source.initialize_body();

        P_BODY("initialization") planet.initialize();

        P_BODY("initialization") ned_frame.initialize(&planet);
    }

    // Temporary functions because Swig / Trick don't seem to like
    // calling the wrapped function from the input file
    void update_from_cart()
    {
        ned_frame.update_from_cart(cartesian_pos);
        return;
    }

    void set_ned_trans_states()
    {
        ned_frame.set_ned_trans_states(cartesian_pos, cartesian_vel);
        return;
    }

    EarthSimObject(const EarthSimObject &) = delete;
    EarthSimObject & operator=(const EarthSimObject &) = delete;
};

EarthSimObject earth;
