//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//
//===========================TRICK HEADER=====================
// PURPOSE:
//==============================================================================
// This simulation is a verification for the RefFrame model in JEOD 2.0
//
//       sys - Trick runtime executive and data recording routines
//       ref_frames - Collection of reference frames to test
//
//
//==============================================================================

// Define job calling intervals
#define DEFAULT 1.00 // Default update interval

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"

// Define the phase initialization priorities.
#include "default_priority_settings.sm"

##include "utils/ref_frames/include/ref_frame.hh"

class RefFramesSimObject : public Trick::SimObject
{
public:
    jeod::RefFrame frame1A;
    jeod::RefFrame frame1B;
    jeod::RefFrame frame1C;
    jeod::RefFrameState state1AwrtC;
    jeod::RefFrameState state1CwrtA;
    double pos1AfromC[3];
    double pos1CfromA[3];

    jeod::RefFrame frame2A;
    jeod::RefFrame frame2B;
    jeod::RefFrame frame2C;
    jeod::RefFrameState state2BwrtC;
    jeod::RefFrameState state2CwrtB;
    double pos2BfromC[3];
    double pos2CfromB[3];

    RefFramesSimObject()
    {
        // initialize quaternions of all ref_frames
        ("initialization") frame1A.state.rot.compute_quaternion();
        ("initialization") frame1B.state.rot.compute_quaternion();
        ("initialization") frame1C.state.rot.compute_quaternion();

        ("initialization") frame2A.state.rot.compute_quaternion();
        ("initialization") frame2B.state.rot.compute_quaternion();
        ("initialization") frame2C.state.rot.compute_quaternion();

        // initialize angular velocity components of all ref_frames
        ("initialization") frame1A.state.rot.compute_ang_vel_products();
        ("initialization") frame1B.state.rot.compute_ang_vel_products();
        ("initialization") frame1C.state.rot.compute_ang_vel_products();

        ("initialization") frame2A.state.rot.compute_ang_vel_products();
        ("initialization") frame2B.state.rot.compute_ang_vel_products();
        ("initialization") frame2C.state.rot.compute_ang_vel_products();

        // setup structure 1
        ("initialization") frame1A.add_child(frame1B);

        ("initialization") frame1B.add_child(frame1C);

        ("initialization") frame1A.make_root();

        // setupt structure 2
        ("initialization") frame2A.add_child(frame2B);

        ("initialization") frame2A.add_child(frame2C);

        ("initialization") frame2A.make_root();

        /* Relative state/pos calculations for structure 1 */

        ("initialization") frame1A.compute_relative_state(frame1C, false, state1AwrtC);

        ("initialization") frame1C.compute_relative_state(frame1A, false, state1CwrtA);

        ("initialization") frame1A.compute_position_from(frame1C, pos1AfromC);

        ("initialization") frame1C.compute_position_from(frame1A, pos1CfromA);

        /* Relative state/pos calculations for structure 2 */

        ("initialization") frame2B.compute_relative_state(frame2C, false, state2BwrtC);

        ("initialization") frame2C.compute_relative_state(frame2B, false, state2CwrtB);

        ("initialization") frame2B.compute_position_from(frame2C, pos2BfromC);

        // This last one is a scheduled job just because trick REALLY prefers
        // having a scheduled job in the S_define, otherwise you get weird
        // behavior
        (DEFAULT, "scheduled") frame2C.compute_position_from(frame2B, pos2CfromB);
    }

    RefFramesSimObject operator=(const RefFramesSimObject &) = delete;
    RefFramesSimObject(const RefFramesSimObject &) = delete;
};

RefFramesSimObject ref_frames;
