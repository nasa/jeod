//=============================================================================
// Notices:
//
// Copyright Â© 2023 United States Government as represented by the Administrator
// of the National Aeronautics and Space Administration.  All Rights Reserved.
//
//
// Disclaimers:
//
// No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF
// ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED
// TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR
// FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR
// FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE
// SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN
// ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS,
// RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS
// RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY
// DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE,
// IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."
//
// Waiver and Indemnity:  RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
// LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
// INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S
// USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE
// UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY
// PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR
// ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS
// AGREEMENT.
//
//=============================================================================
//
//

// This simulation is a verification for the SurfaceModel in JEOD 2.x, with Trick 10
//
//       sys - Trick runtime executive and data recording routines
//       surface_model - Collection of surface models to demonstrate
//                    functionality
//
//
//==============================================================================

// Include the default system classes:
#include "sim_objects/default_trick_sys.sm"

// Include the default jeod object
#include "jeod_sys.sm"


// Define job calling intervals
#define DEFAULT 1.00 // Default update interval

// The includes for this verification
##include "utils/surface_model/verif/include/demo_facet.hh"
##include "utils/surface_model/verif/include/demo_factory.hh"
##include "utils/surface_model/verif/include/demo_interaction.hh"
##include "utils/surface_model/verif/include/demo_interaction_facet.hh"
##include "utils/surface_model/verif/include/demo_params.hh"
##include "utils/surface_model/verif/include/demo_surface.hh"
##include "utils/surface_model/verif/include/demo_surface_factory.hh"

##include "utils/surface_model/include/flat_plate.hh"


// Decleration of the sim_object used for this verification.

class SurfaceModelSimObject : public Trick::SimObject
{
public:
    // Constructor
    SurfaceModelSimObject()
    {
        ("initialization") surf_fact1.create_surface(&surface, &inter_surface1);
        ("initialization") surf_fact2.create_surface(&surface, &inter_surface2);

        (DEFAULT, "scheduled") inter1.run_interaction(inter_surface1);
        (DEFAULT, "scheduled") inter2.run_interaction(inter_surface2);
    }

    // Objects
    jeod::SurfaceModel surface;
    jeod::DemoSurface1 inter_surface1;
    jeod::DemoSurface2 inter_surface2;
    jeod::DemoSurfaceFactory1 surf_fact1;
    jeod::DemoSurfaceFactory2 surf_fact2;
    jeod::DemoInteraction1 inter1;
    jeod::DemoInteraction2 inter2;

    SurfaceModelSimObject operator=(const SurfaceModelSimObject &) = delete;
    SurfaceModelSimObject(const SurfaceModelSimObject &) = delete;
};

// Instantiate the surface model sim object.
SurfaceModelSimObject surface_model;
